import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var StoreService = /** @class */ (function () {
    function StoreService() {
        this._chartInstances = [];
        this._chartId = [];
    }
    StoreService.prototype.addChart = function (id, chart) {
        for (var i = 0; i < this._chartId.length; i++) {
            if (id === this._chartId[i]) {
                return;
            }
        }
        this._chartId.push(id);
        this._chartInstances.push(chart);
    };
    StoreService.prototype.removeChart = function (id) {
        for (var i = 0; i < this._chartId.length; i++) {
            if (id === this._chartId[i]) {
                this._chartId.splice(i, 1);
                this._chartInstances.splice(i, 1); // delete chart instance.
            }
        }
    };
    StoreService.prototype.getChart = function (id) {
        for (var i = 0; i < this._chartId.length; i++) {
            if (id === this._chartId[i]) {
                return this._chartInstances[i];
            }
        }
        return null;
    };
    StoreService.ɵprov = i0.ɵɵdefineInjectable({ factory: function StoreService_Factory() { return new StoreService(); }, token: StoreService, providedIn: "root" });
StoreService.ɵfac = function StoreService_Factory(t) { return new (t || StoreService)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(StoreService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return StoreService;
}());
export { StoreService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuc2VydmljZS5qcyIsInNvdXJjZXMiOlsibmctY2hhcnRqcy9saWIvc3RvcmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQzs7QUFJQTtBQUNvQixJQURwQjtBQUEwQixRQUNoQixvQkFBZSxHQUFVLEVBQUUsQ0FBQztBQUN0QyxRQUFVLGFBQVEsR0FBYSxFQUFFLENBQUM7QUFDbEMsS0E0QkM7QUFDRCxJQTVCRSwrQkFBUSxHQUFSLFVBQVMsRUFBVSxFQUFFLEtBQVU7QUFBSSxRQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDbkQsWUFBTSxJQUFJLEVBQUUsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ25DLGdCQUFRLE9BQU87QUFDZixhQUFPO0FBQ1AsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0IsUUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNyQyxJQUFFLENBQUM7QUFFSCxJQUFFLGtDQUFXLEdBQVgsVUFBWSxFQUFVO0FBQUksUUFDeEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ25ELFlBQU0sSUFBSSxFQUFFLEtBQUssSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUNuQyxnQkFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDbkMsZ0JBQVEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUUseUJBQXlCO0FBQ3JFLGFBQU87QUFDUCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBRUgsSUFBRSwrQkFBUSxHQUFSLFVBQVMsRUFBVTtBQUFJLFFBQ3JCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNuRCxZQUFNLElBQUksRUFBRSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDbkMsZ0JBQVEsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLGFBQU87QUFDUCxTQUFLO0FBQ0wsUUFBSSxPQUFPLElBQUksQ0FBQztBQUNoQixJQUFFLENBQUM7QUFDRjtJQS9CWSxZQUFZLHdCQUh4QixVQUFVLENBQUMsY0FDVixVQUFVLEVBQUUsTUFBTTtDQUNuQixDQUFDLFFBQ1csWUFBWSxDQStCeEI7Ozs7O2dEQUNEO0FBQUMsdUJBckNEO0FBQUUsQ0FvQ0QsQUEvQkQsSUErQkM7QUFDRCxTQWhDYSxZQUFZO0FBQ3hCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBTdG9yZVNlcnZpY2Uge1xuICBwcml2YXRlIF9jaGFydEluc3RhbmNlczogYW55W10gPSBbXTtcbiAgcHJpdmF0ZSBfY2hhcnRJZDogc3RyaW5nW10gPSBbXTtcblxuICBhZGRDaGFydChpZDogc3RyaW5nLCBjaGFydDogYW55KTogdm9pZCB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jaGFydElkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaWQgPT09IHRoaXMuX2NoYXJ0SWRbaV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl9jaGFydElkLnB1c2goaWQpO1xuICAgIHRoaXMuX2NoYXJ0SW5zdGFuY2VzLnB1c2goY2hhcnQpO1xuICB9XG5cbiAgcmVtb3ZlQ2hhcnQoaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY2hhcnRJZC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGlkID09PSB0aGlzLl9jaGFydElkW2ldKSB7XG4gICAgICAgIHRoaXMuX2NoYXJ0SWQuc3BsaWNlKGksIDEpO1xuICAgICAgICB0aGlzLl9jaGFydEluc3RhbmNlcy5zcGxpY2UoaSwgMSk7ICAvLyBkZWxldGUgY2hhcnQgaW5zdGFuY2UuXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0Q2hhcnQoaWQ6IHN0cmluZyk6IGFueSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9jaGFydElkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaWQgPT09IHRoaXMuX2NoYXJ0SWRbaV0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoYXJ0SW5zdGFuY2VzW2ldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuIl19