import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import * as Chart from 'chart.js';
import { PluginConfig } from './plugins-config';
import { StoreService } from './store.service';
import * as i0 from "@angular/core";
import * as i1 from "./store.service";
import * as i2 from "./plugins-config";
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './store.service';
import * as ɵngcc2 from './plugins-config';
var NgChartjsService = /** @class */ (function () {
    function NgChartjsService(storeService, pluginConfig) {
        this.storeService = storeService;
        this.pluginConfig = pluginConfig;
        var plugins = pluginConfig.plugins;
        if (plugins.length !== 0 || plugins) {
            for (var i = 0; i < plugins.length; i++) {
                if (plugins[i]) {
                    Chart.plugins.register(plugins[i]);
                }
            }
        }
    }
    // get chart instance by id
    NgChartjsService.prototype.getChart = function (id) {
        return this.storeService.getChart(id);
    };
    NgChartjsService.ctorParameters = function () { return [
        { type: StoreService },
        { type: PluginConfig }
    ]; };
    NgChartjsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgChartjsService_Factory() { return new NgChartjsService(i0.ɵɵinject(i1.StoreService), i0.ɵɵinject(i2.PluginConfig)); }, token: NgChartjsService, providedIn: "root" });
    NgChartjsService = __decorate([ __metadata("design:paramtypes", [StoreService,
            PluginConfig])
    ], NgChartjsService);
NgChartjsService.ɵfac = function NgChartjsService_Factory(t) { return new (t || NgChartjsService)(ɵngcc0.ɵɵinject(ɵngcc1.StoreService), ɵngcc0.ɵɵinject(ɵngcc2.PluginConfig)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgChartjsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.StoreService }, { type: ɵngcc2.PluginConfig }]; }, null); })();
    return NgChartjsService;
}());
export { NgChartjsService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY2hhcnRqcy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyJuZy1jaGFydGpzL2xpYi9uZy1jaGFydGpzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxLQUFLLEtBQUssTUFBTSxVQUFVLENBQUM7QUFDbEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQztBQUdDO0FBR0c7Ozs7QUFGSjtBQUdFLElBREUsMEJBQ1UsWUFBMEIsRUFDMUIsWUFBMEI7QUFDeEMsUUFGYyxpQkFBWSxHQUFaLFlBQVksQ0FBYztBQUFDLFFBQzNCLGlCQUFZLEdBQVosWUFBWSxDQUFjO0FBQUMsUUFDbkMsSUFBTSxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztBQUMzQyxRQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksT0FBTyxFQUFFO0FBQzNDLFlBQVEsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDakQsZ0JBQVUsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDMUIsb0JBQVksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0MsaUJBQVc7QUFDWCxhQUFTO0FBQ1QsU0FBTztBQUNQLElBQUksQ0FBQztBQUNMLElBQUksMkJBQTJCO0FBQy9CLElBQUksbUNBQVEsR0FBUixVQUFTLEVBQVU7QUFBSSxRQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzVDLElBQUksQ0FBQztBQUNKO0FBQzJELGdCQWhCaEMsWUFBWTtBQUN0QyxnQkFBMEIsWUFBWTtBQUFHO0FBQ2xDO0FBUU4sSUFiVSxnQkFBZ0Isd0JBSDVCLFVBQVUsQ0FBQyxjQUNWLFVBQVUsRUFBRSw5Q0FFTixrQ0FHb0IsWUFBWTtJQUxwQixVQUNuQixDQUFDLGZBS0YsWUFBNEIsWUFBWTtBQUFHLE9BSjlCLGdCQUFnQixDQWtCNUI7Ozs7Ozs7NEdBQ0Q7QUFBQywyQkEzQkQ7QUFBRSxDQTBCRCxBQWxCRCxJQWtCQztBQUNELFNBbkJhLGdCQUFnQjtBQUU3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIENoYXJ0IGZyb20gJ2NoYXJ0LmpzJztcbmltcG9ydCB7IFBsdWdpbkNvbmZpZyB9IGZyb20gJy4vcGx1Z2lucy1jb25maWcnO1xuaW1wb3J0IHsgU3RvcmVTZXJ2aWNlIH0gZnJvbSAnLi9zdG9yZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmdDaGFydGpzU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgIHByaXZhdGUgc3RvcmVTZXJ2aWNlOiBTdG9yZVNlcnZpY2UsXG4gICAgICBwcml2YXRlIHBsdWdpbkNvbmZpZzogUGx1Z2luQ29uZmlnKSB7XG4gICAgICBjb25zdCBwbHVnaW5zID0gcGx1Z2luQ29uZmlnLnBsdWdpbnM7XG4gICAgICBpZiAocGx1Z2lucy5sZW5ndGggIT09IDAgfHwgcGx1Z2lucykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocGx1Z2luc1tpXSkge1xuICAgICAgICAgICAgQ2hhcnQucGx1Z2lucy5yZWdpc3RlcihwbHVnaW5zW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZ2V0IGNoYXJ0IGluc3RhbmNlIGJ5IGlkXG4gICAgZ2V0Q2hhcnQoaWQ6IHN0cmluZyk6IGFueSB7XG4gICAgICByZXR1cm4gdGhpcy5zdG9yZVNlcnZpY2UuZ2V0Q2hhcnQoaWQpO1xuICAgIH1cbn1cbiJdfQ==