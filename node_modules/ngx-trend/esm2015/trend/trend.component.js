import { animate, keyframes, state, style, transition, trigger } from '@angular/animations';
import { Component, Input, ViewChild } from '@angular/core';
import { buildLinearPath, buildSmoothPath } from '../helpers/DOM.helpers';
import { normalize } from '../helpers/math.helpers';
import { generateId } from '../helpers/misc.helpers';
import { normalizeDataset } from './trend.helpers';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["pathEl"];
function TrendComponent__svg_svg_0__svg_defs_1__svg_stop_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelement(0, "stop");
} if (rf & 2) {
    const g_r4 = ctx.$implicit;
    ɵngcc0.ɵɵattribute("key", g_r4.idx)("offset", g_r4.offset)("stop-color", g_r4.stopColor);
} }
function TrendComponent__svg_svg_0__svg_defs_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "defs");
    ɵngcc0.ɵɵelementStart(1, "linearGradient", 3);
    ɵngcc0.ɵɵtemplate(2, TrendComponent__svg_svg_0__svg_defs_1__svg_stop_2_Template, 1, 3, "stop", 4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("id", ctx_r1.gradientId);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r1.gradientTrimmed);
} }
const _c1 = function (a0, a1, a2) { return { autoDrawDuration: a0, autoDrawEasing: a1, lineLength: a2 }; };
const _c2 = function (a0, a1) { return { value: a0, params: a1 }; };
function TrendComponent__svg_svg_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(0, "svg");
    ɵngcc0.ɵɵtemplate(1, TrendComponent__svg_svg_0__svg_defs_1_Template, 3, 2, "defs", 0);
    ɵngcc0.ɵɵelement(2, "path", 1, 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("width", ctx_r0.svgWidth)("height", ctx_r0.svgHeight)("stroke", ctx_r0.stroke)("stroke-width", ctx_r0.strokeWidth)("stroke-linecap", ctx_r0.strokeLinecap)("viewBox", ctx_r0.viewBox)("preserveAspectRatio", ctx_r0.preserveAspectRatio);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.gradient && ctx_r0.gradient.length);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("@pathAnimaiton", ɵngcc0.ɵɵpureFunction2(15, _c2, ctx_r0.animationState, ɵngcc0.ɵɵpureFunction3(11, _c1, ctx_r0.autoDrawDuration, ctx_r0.autoDrawEasing, ctx_r0.lineLength)));
    ɵngcc0.ɵɵattribute("stroke", ctx_r0.pathStroke)("d", ctx_r0.d);
} }
export class TrendComponent {
    constructor() {
        this.autoDraw = false;
        this.autoDrawDuration = 2000;
        this.autoDrawEasing = 'ease';
        this.padding = 8;
        this.radius = 10;
        this.stroke = 'black';
        this.strokeLinecap = '';
        this.strokeWidth = 1;
        this.gradient = [];
        this.svgHeight = '25%';
        this.svgWidth = '100%';
        this.animationState = '';
        this.id = generateId();
        this.gradientId = `ngx-trend-vertical-gradient-${this.id}`;
    }
    ngOnChanges() {
        // We need at least 2 points to draw a graph.
        if (!this.data || this.data.length < 2) {
            return;
        }
        // `data` can either be an array of numbers:
        // [1, 2, 3]
        // or, an array of objects containing a value:
        // [{ value: 1 }, { value: 2 }, { value: 3 }]
        //
        // For now, we're just going to convert the second form to the first.
        // Later on, if/when we support tooltips, we may adjust.
        const plainValues = this.data.map(point => {
            if (typeof point === 'number') {
                return point;
            }
            return point.value;
        });
        // Our viewbox needs to be in absolute units, so we'll default to 300x75
        // Our SVG can be a %, though; this is what makes it scalable.
        // By defaulting to percentages, the SVG will grow to fill its parent
        // container, preserving a 1/4 aspect ratio.
        const viewBoxWidth = this.width || 300;
        const viewBoxHeight = this.height || 75;
        this.svgWidth = this.width || '100%';
        this.svgHeight = this.height || '25%';
        this.viewBox = `0 0 ${viewBoxWidth} ${viewBoxHeight}`;
        const root = location.href.split(location.hash || '#')[0];
        this.pathStroke =
            this.gradient && this.gradient.length ? `url('${root}#${this.gradientId}')` : undefined;
        this.gradientTrimmed = this.gradient
            .slice()
            .reverse()
            .map((val, idx) => {
            return {
                idx,
                stopColor: val,
                offset: normalize(idx, 0, this.gradient.length - 1 || 1),
            };
        });
        const normalizedValues = normalizeDataset(plainValues, this.padding, viewBoxWidth - this.padding, 
        // NOTE: Because SVGs are indexed from the top left, but most data is
        // indexed from the bottom left, we're inverting the Y min/max.
        viewBoxHeight - this.padding, this.padding);
        if (this.autoDraw && this.animationState !== 'active') {
            this.animationState = 'inactive';
            setTimeout(() => {
                this.lineLength = this.pathEl.nativeElement.getTotalLength();
                this.animationState = 'active';
            });
        }
        this.d = this.smooth
            ? buildSmoothPath(normalizedValues, this.radius)
            : buildLinearPath(normalizedValues);
    }
}
TrendComponent.ɵfac = function TrendComponent_Factory(t) { return new (t || TrendComponent)(); };
TrendComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TrendComponent, selectors: [["ngx-trend"]], viewQuery: function TrendComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.pathEl = _t.first);
    } }, inputs: { autoDraw: "autoDraw", autoDrawDuration: "autoDrawDuration", autoDrawEasing: "autoDrawEasing", padding: "padding", radius: "radius", stroke: "stroke", strokeLinecap: "strokeLinecap", strokeWidth: "strokeWidth", gradient: "gradient", svgHeight: "svgHeight", svgWidth: "svgWidth", data: "data", smooth: "smooth", width: "width", height: "height", preserveAspectRatio: "preserveAspectRatio" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [[4, "ngIf"], ["fill", "none"], ["pathEl", ""], ["x1", "0%", "y1", "0%", "x2", "0%", "y2", "100%"], [4, "ngFor", "ngForOf"]], template: function TrendComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TrendComponent__svg_svg_0_Template, 4, 18, "svg", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.data && ctx.data.length >= 2);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf], encapsulation: 2, data: { animation: [
            trigger('pathAnimaiton', [
                state('inactive', style({ display: 'none' })),
                transition('* => active', [
                    style({ display: 'initial' }),
                    // We do the animation using the dash array/offset trick
                    // https://css-tricks.com/svg-line-animation-works/
                    animate('{{ autoDrawDuration }}ms {{ autoDrawEasing }}', keyframes([
                        style({
                            'stroke-dasharray': '{{ lineLength }}px',
                            'stroke-dashoffset': '{{ lineLength }}px'
                        }),
                        style({
                            'stroke-dasharray': '{{ lineLength }}px',
                            'stroke-dashoffset': 0
                        }),
                    ])),
                    // One unfortunate side-effect of the auto-draw is that the line is
                    // actually 1 big dash, the same length as the line itself. If the
                    // line length changes (eg. radius change, new data), that dash won't
                    // be the same length anymore. We can fix that by removing those
                    // properties once the auto-draw is completed.
                    style({
                        'stroke-dashoffset': '',
                        'stroke-dasharray': ''
                    }),
                ]),
            ]),
        ] } });
TrendComponent.ctorParameters = () => [];
TrendComponent.propDecorators = {
    data: [{ type: Input }],
    smooth: [{ type: Input }],
    autoDraw: [{ type: Input }],
    autoDrawDuration: [{ type: Input }],
    autoDrawEasing: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    padding: [{ type: Input }],
    radius: [{ type: Input }],
    stroke: [{ type: Input }],
    strokeLinecap: [{ type: Input }],
    strokeWidth: [{ type: Input }],
    gradient: [{ type: Input }],
    preserveAspectRatio: [{ type: Input }],
    svgHeight: [{ type: Input }],
    svgWidth: [{ type: Input }],
    pathEl: [{ type: ViewChild, args: ['pathEl',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TrendComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-trend',
                template: `
    <svg
      *ngIf="data && data.length >= 2"
      [attr.width]="svgWidth"
      [attr.height]="svgHeight"
      [attr.stroke]="stroke"
      [attr.stroke-width]="strokeWidth"
      [attr.stroke-linecap]="strokeLinecap"
      [attr.viewBox]="viewBox"
      [attr.preserveAspectRatio]="preserveAspectRatio"
    >
      <defs *ngIf="gradient && gradient.length">
        <linearGradient [attr.id]="gradientId" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop
            *ngFor="let g of gradientTrimmed"
            [attr.key]="g.idx"
            [attr.offset]="g.offset"
            [attr.stop-color]="g.stopColor"
          />
        </linearGradient>
      </defs>
      <path
        fill="none"
        #pathEl
        [attr.stroke]="pathStroke"
        [attr.d]="d"
        [@pathAnimaiton]="{
          value: animationState,
          params: {
            autoDrawDuration: autoDrawDuration,
            autoDrawEasing: autoDrawEasing,
            lineLength: lineLength
          }
        }"
      />
    </svg>
  `,
                animations: [
                    trigger('pathAnimaiton', [
                        state('inactive', style({ display: 'none' })),
                        transition('* => active', [
                            style({ display: 'initial' }),
                            // We do the animation using the dash array/offset trick
                            // https://css-tricks.com/svg-line-animation-works/
                            animate('{{ autoDrawDuration }}ms {{ autoDrawEasing }}', keyframes([
                                style({
                                    'stroke-dasharray': '{{ lineLength }}px',
                                    'stroke-dashoffset': '{{ lineLength }}px'
                                }),
                                style({
                                    'stroke-dasharray': '{{ lineLength }}px',
                                    'stroke-dashoffset': 0
                                }),
                            ])),
                            // One unfortunate side-effect of the auto-draw is that the line is
                            // actually 1 big dash, the same length as the line itself. If the
                            // line length changes (eg. radius change, new data), that dash won't
                            // be the same length anymore. We can fix that by removing those
                            // properties once the auto-draw is completed.
                            style({
                                'stroke-dashoffset': '',
                                'stroke-dasharray': ''
                            }),
                        ]),
                    ]),
                ]
            }]
    }], function () { return []; }, { autoDraw: [{
            type: Input
        }], autoDrawDuration: [{
            type: Input
        }], autoDrawEasing: [{
            type: Input
        }], padding: [{
            type: Input
        }], radius: [{
            type: Input
        }], stroke: [{
            type: Input
        }], strokeLinecap: [{
            type: Input
        }], strokeWidth: [{
            type: Input
        }], gradient: [{
            type: Input
        }], svgHeight: [{
            type: Input
        }], svgWidth: [{
            type: Input
        }], data: [{
            type: Input
        }], smooth: [{
            type: Input
        }], width: [{
            type: Input
        }], height: [{
            type: Input
        }], preserveAspectRatio: [{
            type: Input
        }], pathEl: [{
            type: ViewChild,
            args: ['pathEl']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,