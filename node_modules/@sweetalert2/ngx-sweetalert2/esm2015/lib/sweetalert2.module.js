import * as ɵngcc0 from '@angular/core';
var SweetAlert2Module_1;
import { __decorate } from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { dismissOnDestroyToken, fireOnInitToken, swalProviderToken } from './di';
import { SwalPortalComponent } from './swal-portal.component';
import { SwalPortalDirective } from './swal-portal.directive';
import { SwalComponent } from './swal.component';
import { SwalDirective } from './swal.directive';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
export function provideDefaultSwal() {
    return import('sweetalert2');
}
let SweetAlert2Module = SweetAlert2Module_1 = class SweetAlert2Module {
    static forRoot(options = {}) {
        return {
            ngModule: SweetAlert2Module_1,
            providers: [
                SweetAlert2LoaderService,
                { provide: swalProviderToken, useValue: options.provideSwal || provideDefaultSwal },
                { provide: fireOnInitToken, useValue: options.fireOnInit || false },
                { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy || true }
            ]
        };
    }
    static forChild(options = {}) {
        return {
            ngModule: SweetAlert2Module_1,
            providers: [
                ...options.provideSwal ? [
                    SweetAlert2LoaderService,
                    { provide: swalProviderToken, useValue: options.provideSwal }
                ] : [],
                ...options.fireOnInit !== undefined ? [
                    { provide: fireOnInitToken, useValue: options.fireOnInit }
                ] : [],
                ...options.dismissOnDestroy !== undefined ? [
                    { provide: dismissOnDestroyToken, useValue: options.dismissOnDestroy }
                ] : []
            ]
        };
    }
};
SweetAlert2Module.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SweetAlert2Module });
SweetAlert2Module.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SweetAlert2Module_Factory(t) { return new (t || SweetAlert2Module)(); }, imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SweetAlert2Module, { declarations: function () { return [SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SwalComponent, SwalPortalDirective, SwalDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SweetAlert2Module, [{
        type: NgModule,
        args: [{
                declarations: [
                    SwalDirective, SwalComponent, SwalPortalDirective, SwalPortalComponent
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    SwalComponent, SwalPortalDirective, SwalDirective
                ],
                entryComponents: [
                    SwalComponent, SwalPortalComponent
                ]
            }]
    }], null, null); })();
export { SweetAlert2Module };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dlZXRhbGVydDIubW9kdWxlLmpzIiwic291cmNlcyI6WyJAc3dlZXRhbGVydDIvbmd4LXN3ZWV0YWxlcnQyL2xpYi9zd2VldGFsZXJ0Mi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDakYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQWdCLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFRdEYsTUFBTSxVQUFVLGtCQUFrQjtBQUNsQyxJQUFJLE9BQU8sTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFnQkQsSUFBYSxpQkFBaUIseUJBQTlCLE1BQWEsaUJBQWlCO0FBQzlCLElBQVcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFtQyxFQUFFO0FBQUksUUFDM0QsT0FBTztBQUNmLFlBQVksUUFBUSxFQUFFLG1CQUFpQjtBQUN2QyxZQUFZLFNBQVMsRUFBRTtBQUN2QixnQkFBZ0Isd0JBQXdCO0FBQ3hDLGdCQUFnQixFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFdBQVcsSUFBSSxrQkFBa0IsRUFBRTtBQUNuRyxnQkFBZ0IsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsVUFBVSxJQUFJLEtBQUssRUFBRTtBQUNuRixnQkFBZ0IsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLEVBQUU7QUFDOUYsYUFBYTtBQUNiLFNBQVMsQ0FBQztBQUNWLElBQUksQ0FBQztBQUNMLElBQ1csTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFtQyxFQUFFO0FBQUksUUFDNUQsT0FBTztBQUNmLFlBQVksUUFBUSxFQUFFLG1CQUFpQjtBQUN2QyxZQUFZLFNBQVMsRUFBRTtBQUN2QixnQkFBZ0IsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUN6QyxvQkFBb0Isd0JBQXdCO0FBQzVDLG9CQUFvQixFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFdBQVcsRUFBRTtBQUNqRixpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN0QixnQkFBZ0IsR0FBRyxPQUFPLENBQUMsVUFBVSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7QUFDdEQsb0JBQW9CLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFVBQVUsRUFBRTtBQUM5RSxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN0QixnQkFBZ0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztBQUM1RCxvQkFBb0IsRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtBQUMxRixpQkFBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRTtBQUN0QixhQUFhO0FBQ2IsU0FBUyxDQUFDO0FBQ1YsSUFBSSxDQUFDO0FBQ0wsQ0FBQyxDQUFBO0FBOUJZLGlCQUFpQiwwQ0FkN0IsUUFBUSxDQUFDLFVBQ047V0FBWSxFQUFFLGNBQ1YsYUFBYSxFQUFFLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxtQkFBbUIsVUFDekUsVUFDRCxPQUFPLEVBQUUsY0FDTCxZQUFZO1FBQ2YsVUFDRDtBQUFPLEVBQUU7Q0FDTCxhQUFhLEVBQUUsbUJBQW1CLEVBQUUsYUFBYSxVQUNwRCxVQUNELGVBQWUsRUFBRSxjQUNiLGFBQWEsRUFBRSxtQkFBbUIsVUFDckMsTUFDSixDQUFDLElBQ1csaUJBQWlCLENBOEI3Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQ0Q7QUFBQyxTQS9CWSxpQkFBaUI7QUFDN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGRpc21pc3NPbkRlc3Ryb3lUb2tlbiwgZmlyZU9uSW5pdFRva2VuLCBzd2FsUHJvdmlkZXJUb2tlbiB9IGZyb20gJy4vZGknO1xuaW1wb3J0IHsgU3dhbFBvcnRhbENvbXBvbmVudCB9IGZyb20gJy4vc3dhbC1wb3J0YWwuY29tcG9uZW50JztcbmltcG9ydCB7IFN3YWxQb3J0YWxEaXJlY3RpdmUgfSBmcm9tICcuL3N3YWwtcG9ydGFsLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTd2FsQ29tcG9uZW50IH0gZnJvbSAnLi9zd2FsLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTd2FsRGlyZWN0aXZlIH0gZnJvbSAnLi9zd2FsLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBTd2FsUHJvdmlkZXIsIFN3ZWV0QWxlcnQyTG9hZGVyU2VydmljZSB9IGZyb20gJy4vc3dlZXRhbGVydDItbG9hZGVyLnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN3ZWV0YWxlcnQyTW9kdWxlQ29uZmlnIHtcbiAgICBwcm92aWRlU3dhbD86IFN3YWxQcm92aWRlcjtcbiAgICBmaXJlT25Jbml0PzogYm9vbGVhbjtcbiAgICBkaXNtaXNzT25EZXN0cm95PzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVEZWZhdWx0U3dhbCgpIHtcbiAgICByZXR1cm4gaW1wb3J0KCdzd2VldGFsZXJ0MicpO1xufVxuXG5ATmdNb2R1bGUoe1xuICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBTd2FsRGlyZWN0aXZlLCBTd2FsQ29tcG9uZW50LCBTd2FsUG9ydGFsRGlyZWN0aXZlLCBTd2FsUG9ydGFsQ29tcG9uZW50XG4gICAgXSxcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIENvbW1vbk1vZHVsZVxuICAgIF0sXG4gICAgZXhwb3J0czogW1xuICAgICAgICBTd2FsQ29tcG9uZW50LCBTd2FsUG9ydGFsRGlyZWN0aXZlLCBTd2FsRGlyZWN0aXZlXG4gICAgXSxcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtcbiAgICAgICAgU3dhbENvbXBvbmVudCwgU3dhbFBvcnRhbENvbXBvbmVudFxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgU3dlZXRBbGVydDJNb2R1bGUge1xuICAgIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChvcHRpb25zOiBTd2VldGFsZXJ0Mk1vZHVsZUNvbmZpZyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxTd2VldEFsZXJ0Mk1vZHVsZT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IFN3ZWV0QWxlcnQyTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgU3dlZXRBbGVydDJMb2FkZXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogc3dhbFByb3ZpZGVyVG9rZW4sIHVzZVZhbHVlOiBvcHRpb25zLnByb3ZpZGVTd2FsIHx8IHByb3ZpZGVEZWZhdWx0U3dhbCB9LFxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogZmlyZU9uSW5pdFRva2VuLCB1c2VWYWx1ZTogb3B0aW9ucy5maXJlT25Jbml0IHx8IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBkaXNtaXNzT25EZXN0cm95VG9rZW4sIHVzZVZhbHVlOiBvcHRpb25zLmRpc21pc3NPbkRlc3Ryb3kgfHwgdHJ1ZSB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBmb3JDaGlsZChvcHRpb25zOiBTd2VldGFsZXJ0Mk1vZHVsZUNvbmZpZyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxTd2VldEFsZXJ0Mk1vZHVsZT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IFN3ZWV0QWxlcnQyTW9kdWxlLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5wcm92aWRlU3dhbCA/IFtcbiAgICAgICAgICAgICAgICAgICAgU3dlZXRBbGVydDJMb2FkZXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IHN3YWxQcm92aWRlclRva2VuLCB1c2VWYWx1ZTogb3B0aW9ucy5wcm92aWRlU3dhbCB9XG4gICAgICAgICAgICAgICAgXSA6IFtdLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMuZmlyZU9uSW5pdCAhPT0gdW5kZWZpbmVkID8gW1xuICAgICAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IGZpcmVPbkluaXRUb2tlbiwgdXNlVmFsdWU6IG9wdGlvbnMuZmlyZU9uSW5pdCB9XG4gICAgICAgICAgICAgICAgXSA6IFtdLFxuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMuZGlzbWlzc09uRGVzdHJveSAhPT0gdW5kZWZpbmVkID8gW1xuICAgICAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IGRpc21pc3NPbkRlc3Ryb3lUb2tlbiwgdXNlVmFsdWU6IG9wdGlvbnMuZGlzbWlzc09uRGVzdHJveSB9XG4gICAgICAgICAgICAgICAgXSA6IFtdXG4gICAgICAgICAgICBdXG4gICAgICAgIH07XG4gICAgfVxufVxuIl19