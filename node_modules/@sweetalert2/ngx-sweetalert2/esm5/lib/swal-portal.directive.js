import { __awaiter, __decorate, __generator, __param } from "tslib";
import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { SwalPortalTarget, SwalPortalTargets } from './swal-portal-targets.service';
import { SwalPortalComponent } from './swal-portal.component';
import { SwalComponent } from './swal.component';
import { SweetAlert2LoaderService } from './sweetalert2-loader.service';
/**
 * A structural directive that lets you use Angular templates inside of SweetAlerts.
 * There are different targetable zones provided by {@link SwalPortalTargets}: title, content, confirmButton, etc, but
 * you can also make your own target by implementing {@link SwalPortalTarget} and giving it to this directive.
 * The default target is the alert text content zone.
 *
 * Usage in your component's TypeScript (if you use another target than {@link SwalPortalTargets.content}):
 *
 *     @Component({ ... })
 *     export class MyComponent {
 *         public constructor(public readonly swalTargets: SwalPortalTargets) {
 *         }
 *     }
 *
 * Usage in the template:
 *
 *     <swal title="Fill the form" (confirm)="confirmHandler()">
 *         <!-- This form will be displayed as the alert main content
 *              Targets the alert's main content zone by default -->
 *         <form *swalPortal [formControl]="myForm">
 *             ...
 *         </form>
 *
 *         <!-- This targets the confirm button's inner content
 *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->
 *         <ng-container *swalPortal="swalTargets.confirmButton">
 *              Send ({{ secondsLeft }} seconds left)
 *         </ng-container>
 *     <swal>
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './sweetalert2-loader.service';
import * as ɵngcc2 from './swal-portal-targets.service';
import * as ɵngcc3 from './swal.component';
var SwalPortalDirective = /** @class */ (function () {
    function SwalPortalDirective(resolver, injector, app, templateRef, sweetAlert2Loader, swalTargets, swalComponent) {
        this.resolver = resolver;
        this.injector = injector;
        this.app = app;
        this.templateRef = templateRef;
        this.sweetAlert2Loader = sweetAlert2Loader;
        this.swalTargets = swalTargets;
        this.swalComponent = swalComponent;
        this.destroyed = new Subject();
    }
    /**
     * Subscribes to the the SweetAlert appearance/disappearance events to create/destroy the SwalPortalComponent
     * that will receive the consumer's template.
     */
    SwalPortalDirective.prototype.ngOnInit = function () {
        // Can't be set in a default property value, if the customer lets *swalPortal empty, the value we get is undef.
        this.target = this.target || this.swalTargets.content;
        //=> Apply the options provided by the target definition
        void this.swalComponent.update(this.target.options);
        //=> Subscribe to a few hooks frm the parent SwalComponent.
        this.swalComponent.render.pipe(takeUntil(this.destroyed)).subscribe(this.renderHook.bind(this));
        this.swalComponent.beforeOpen.pipe(takeUntil(this.destroyed)).subscribe(this.beforeOpenHook.bind(this));
        this.swalComponent.destroy.pipe(takeUntil(this.destroyed)).subscribe(this.destroyHook.bind(this));
    };
    /**
     * Signal any {@link destroyed} consumer that this is over, so they can unsubscribe from the
     * parent SwalComponent events.
     */
    SwalPortalDirective.prototype.ngOnDestroy = function () {
        this.destroyed.next();
    };
    /**
     * This render hook runs 1..n times (per modal instance), just before the modal is shown (and also before the
     * {@link beforeOpenHook}), or after Swal.update() is called.
     * This is a good place to render, or re-render, our portal contents.
     */
    SwalPortalDirective.prototype.renderHook = function () {
        return __awaiter(this, void 0, void 0, function () {
            var swal, targetEl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        //=> Ensure the portal component is created
                        if (!this.portalComponentRef) {
                            this.portalComponentRef = this.createPortalComponent();
                        }
                        return [4 /*yield*/, this.sweetAlert2Loader.swal];
                    case 1:
                        swal = _a.sent();
                        targetEl = this.target.element(swal);
                        if (!targetEl)
                            return [2 /*return*/];
                        //=> Replace target's contents with our component
                        // https://jsperf.com/innerhtml-vs-removechild/15
                        while (targetEl.firstChild) {
                            targetEl.removeChild(targetEl.firstChild);
                        }
                        targetEl.appendChild(this.portalComponentRef.location.nativeElement);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * This beforeOpen hook runs once (per modal instance), just before the modal is shown on the screen.
     * This is a good place to declare our detached view to the Angular app.
     */
    SwalPortalDirective.prototype.beforeOpenHook = function () {
        if (!this.portalComponentRef)
            return;
        //=> Make the Angular app aware of that detached view so rendering and change detection can happen
        this.app.attachView(this.portalComponentRef.hostView);
    };
    /**
     * This afterClose hook runs once (per modal instance), just after the modal closing animation terminated.
     * This is a good place to detach and destroy our content, that is not visible anymore.
     */
    SwalPortalDirective.prototype.destroyHook = function () {
        if (!this.portalComponentRef)
            return;
        //=> Detach the portal component from the app and destroy it
        this.app.detachView(this.portalComponentRef.hostView);
        this.portalComponentRef.destroy();
        this.portalComponentRef = void 0;
    };
    /**
     * Creates the {@link SwalPortalComponent} and gives it the customer's template ref.
     */
    SwalPortalDirective.prototype.createPortalComponent = function () {
        //=> Create the SwalPortalComponent that will hold our content
        var factory = this.resolver.resolveComponentFactory(SwalPortalComponent);
        // Yes, we do not use the third argument that would directly use the target as the component's view
        // (unfortunately, because that would give a cleaner DOM and would avoid dirty and direct DOM manipulations)
        // That's because we want to keep our component safe from SweetAlert2's operations on the DOM, and to be
        // able to restore it at any moment, ie. after the modal has been re-rendered.
        var componentRef = factory.create(this.injector, []);
        //=> Apply the consumer's template on the component
        componentRef.instance.template = this.templateRef;
        return componentRef;
    };
    SwalPortalDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef },
        { type: TemplateRef },
        { type: SweetAlert2LoaderService },
        { type: SwalPortalTargets },
        { type: SwalComponent, decorators: [{ type: Host }] }
    ]; };
    __decorate([
        Input('swalPortal')
    ], SwalPortalDirective.prototype, "target", void 0);
    SwalPortalDirective = __decorate([ __param(6, Host())
    ], SwalPortalDirective);
SwalPortalDirective.ɵfac = function SwalPortalDirective_Factory(t) { return new (t || SwalPortalDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.SweetAlert2LoaderService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.SwalPortalTargets), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.SwalComponent, 1)); };
SwalPortalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SwalPortalDirective, selectors: [["", "swalPortal", ""]], inputs: { target: ["swalPortal", "target"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SwalPortalDirective, [{
        type: Directive,
        args: [{
                selector: '[swalPortal]'
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc1.SweetAlert2LoaderService }, { type: ɵngcc2.SwalPortalTargets }, { type: ɵngcc3.SwalComponent, decorators: [{
                type: Host
            }] }]; }, { target: [{
            type: Input,
            args: ['swalPortal']
        }] }); })();
    return SwalPortalDirective;
}());
export { SwalPortalDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,