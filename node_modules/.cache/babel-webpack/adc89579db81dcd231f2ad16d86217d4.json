{"ast":null,"code":"import _classCallCheck from \"C:/Users/DTI_UCH/Desktop/template_angularjs10/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/DTI_UCH/Desktop/template_angularjs10/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, LOCALE_ID, Inject, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { formatDate, CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction CountdownComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"span\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r0.i.text, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction CountdownComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nvar _c0 = function _c0(a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nvar CountdownStatus = /*@__PURE__*/function (CountdownStatus) {\n  CountdownStatus[CountdownStatus[\"ing\"] = 0] = \"ing\";\n  CountdownStatus[CountdownStatus[\"pause\"] = 1] = \"pause\";\n  CountdownStatus[CountdownStatus[\"stop\"] = 2] = \"stop\";\n  CountdownStatus[CountdownStatus[\"done\"] = 3] = \"done\";\n  return CountdownStatus;\n}({});\n\nvar CountdownTimer = /*@__PURE__*/function () {\n  var CountdownTimer = /*#__PURE__*/function () {\n    function CountdownTimer(ngZone) {\n      _classCallCheck(this, CountdownTimer);\n\n      this.ngZone = ngZone;\n      this.fns = [];\n      this.commands = [];\n      this.ing = false;\n    }\n\n    _createClass(CountdownTimer, [{\n      key: \"start\",\n      value: function start() {\n        var _this = this;\n\n        if (this.ing === true) {\n          return;\n        }\n\n        this.ing = true;\n        this.nextTime = +new Date();\n        this.ngZone.runOutsideAngular(function () {\n          _this.process();\n        });\n      }\n    }, {\n      key: \"process\",\n      value: function process() {\n        var _this2 = this;\n\n        while (this.commands.length) {\n          this.commands.shift()();\n        }\n\n        var diff = +new Date() - this.nextTime;\n        var count = 1 + Math.floor(diff / 100);\n        diff = 100 - diff % 100;\n        this.nextTime += 100 * count;\n\n        for (var i = 0, len = this.fns.length; i < len; i += 2) {\n          var frequency = this.fns[i + 1]; // 100/s\n\n          if (0 === frequency) {\n            this.fns[i](count); // 1000/s\n          } else {\n            // 先把末位至0，再每次加2\n            frequency += 2 * count - 1;\n            var step = Math.floor(frequency / 20);\n\n            if (step > 0) {\n              this.fns[i](step);\n            } // 把末位还原成1\n\n\n            this.fns[i + 1] = frequency % 20 + 1;\n          }\n        }\n\n        if (!this.ing) {\n          return;\n        }\n\n        setTimeout(function () {\n          return _this2.process();\n        }, diff);\n      }\n    }, {\n      key: \"add\",\n      value: function add(fn, frequency) {\n        var _this3 = this;\n\n        this.commands.push(function () {\n          _this3.fns.push(fn);\n\n          _this3.fns.push(frequency === 1000 ? 1 : 0);\n\n          _this3.ing = true;\n        });\n        return this;\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(fn) {\n        var _this4 = this;\n\n        this.commands.push(function () {\n          var i = _this4.fns.indexOf(fn);\n\n          if (i !== -1) {\n            _this4.fns.splice(i, 2);\n          }\n\n          _this4.ing = _this4.fns.length > 0;\n        });\n        return this;\n      }\n    }]);\n\n    return CountdownTimer;\n  }();\n\n  CountdownTimer.ɵfac = function CountdownTimer_Factory(t) {\n    return new (t || CountdownTimer)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  CountdownTimer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: CountdownTimer,\n    factory: CountdownTimer.ɵfac\n  });\n  return CountdownTimer;\n}();\n\nvar CountdownGlobalConfig = /*@__PURE__*/function () {\n  var CountdownGlobalConfig = function CountdownGlobalConfig(locale) {\n    var _this5 = this;\n\n    _classCallCheck(this, CountdownGlobalConfig);\n\n    this.locale = locale;\n    this.demand = false;\n    this.leftTime = 0;\n    this.format = 'HH:mm:ss';\n    this.timezone = '+0000';\n\n    this.formatDate = function (_ref) {\n      var date = _ref.date,\n          formatStr = _ref.formatStr,\n          timezone = _ref.timezone;\n      return formatDate(new Date(date), formatStr, _this5.locale, timezone || _this5.timezone || '+0000'); // tslint:disable-next-line: semicolon\n    };\n  };\n\n  CountdownGlobalConfig.ɵfac = function CountdownGlobalConfig_Factory(t) {\n    return new (t || CountdownGlobalConfig)(ɵngcc0.ɵɵinject(LOCALE_ID));\n  };\n\n  CountdownGlobalConfig.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function CountdownGlobalConfig_Factory() {\n      return new CountdownGlobalConfig(ɵɵinject(LOCALE_ID));\n    },\n    token: CountdownGlobalConfig,\n    providedIn: \"root\"\n  });\n  return CountdownGlobalConfig;\n}();\n\nvar CountdownComponent = /*@__PURE__*/function () {\n  var CountdownComponent = /*#__PURE__*/function () {\n    function CountdownComponent(locale, timer, defCog, cdr, ngZone) {\n      _classCallCheck(this, CountdownComponent);\n\n      this.locale = locale;\n      this.timer = timer;\n      this.defCog = defCog;\n      this.cdr = cdr;\n      this.ngZone = ngZone;\n      this.frequency = 1000;\n      this._notify = {};\n      this.status = CountdownStatus.ing;\n      this.isDestroy = false;\n      this.i = {};\n      this.left = 0;\n      this.event = new EventEmitter();\n    }\n    /**\n     * Start countdown, you must manually call when `demand: false`\n     */\n\n\n    _createClass(CountdownComponent, [{\n      key: \"begin\",\n      value: function begin() {\n        this.status = CountdownStatus.ing;\n        this.callEvent('start');\n      }\n      /**\n       * Restart countdown\n       */\n\n    }, {\n      key: \"restart\",\n      value: function restart() {\n        if (this.status !== CountdownStatus.stop) {\n          this.destroy();\n        }\n\n        this.init();\n        this.callEvent('restart');\n      }\n      /**\n       * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover\n       */\n\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        if (this.status === CountdownStatus.stop) {\n          return;\n        }\n\n        this.status = CountdownStatus.stop;\n        this.destroy();\n        this.callEvent('stop');\n      }\n      /**\n       * Pause countdown, you can use `resume` to recover again\n       */\n\n    }, {\n      key: \"pause\",\n      value: function pause() {\n        if (this.status === CountdownStatus.stop || this.status === CountdownStatus.pause) {\n          return;\n        }\n\n        this.status = CountdownStatus.pause;\n        this.callEvent('pause');\n      }\n      /**\n       * Resume countdown\n       */\n\n    }, {\n      key: \"resume\",\n      value: function resume() {\n        if (this.status === CountdownStatus.stop || this.status !== CountdownStatus.pause) {\n          return;\n        }\n\n        this.status = CountdownStatus.ing;\n        this.callEvent('resume');\n      }\n    }, {\n      key: \"callEvent\",\n      value: function callEvent(action) {\n        this.event.emit({\n          action: action,\n          left: this.left,\n          status: this.status,\n          text: this.i.text\n        });\n      }\n    }, {\n      key: \"init\",\n      value: function init() {\n        var _this6 = this;\n\n        var locale = this.locale,\n            defCog = this.defCog;\n        var config = this.config = Object.assign(Object.assign(Object.assign({}, new CountdownGlobalConfig(locale)), defCog), this.config); // tslint:disable-next-line: no-bitwise\n\n        var frq = this.frequency = ~config.format.indexOf('S') ? 100 : 1000;\n        this.status = config.demand ? CountdownStatus.pause : CountdownStatus.ing;\n        this.getLeft(); // bind reflow to me\n\n        var _reflow = this.reflow;\n\n        this.reflow = function () {\n          var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n          var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          return _reflow.apply(_this6, [count, force]);\n        };\n\n        if (Array.isArray(config.notify)) {\n          config.notify.forEach(function (time) {\n            if (time < 1) {\n              throw new Error(\"The notify config must be a positive integer.\");\n            }\n\n            time = time * 1000;\n            time = time - time % frq;\n            _this6._notify[time] = true;\n          });\n        }\n\n        this.timer.add(this.reflow, frq).start();\n        this.reflow(0, true);\n      }\n    }, {\n      key: \"destroy\",\n      value: function destroy() {\n        this.timer.remove(this.reflow);\n        return this;\n      }\n      /**\n       * 更新时钟\n       */\n\n    }, {\n      key: \"reflow\",\n      value: function reflow() {\n        var _this7 = this;\n\n        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (this.isDestroy) {\n          return;\n        }\n\n        var status = this.status,\n            config = this.config,\n            _notify = this._notify;\n\n        if (!force && status !== CountdownStatus.ing) {\n          return;\n        }\n\n        var value = this.left = this.left - this.frequency * count;\n\n        if (value < 1) {\n          value = 0;\n        }\n\n        this.i = {\n          value: value,\n          text: config.formatDate({\n            date: value,\n            formatStr: config.format,\n            timezone: config.timezone\n          })\n        };\n\n        if (typeof config.prettyText === 'function') {\n          this.i.text = config.prettyText(this.i.text);\n        }\n\n        this.cdr.detectChanges();\n\n        if (config.notify === 0 || _notify[value]) {\n          this.ngZone.run(function () {\n            _this7.callEvent('notify');\n          });\n        }\n\n        if (value === 0) {\n          this.ngZone.run(function () {\n            _this7.status = CountdownStatus.done;\n\n            _this7.callEvent('done');\n\n            _this7.destroy();\n          });\n        }\n      }\n      /**\n       * 获取倒计时剩余帧数\n       */\n\n    }, {\n      key: \"getLeft\",\n      value: function getLeft() {\n        var config = this.config,\n            frequency = this.frequency;\n        var left = config.leftTime * 1000;\n        var end = config.stopTime;\n\n        if (!left && end) {\n          left = end - new Date().getTime();\n        }\n\n        this.left = left - left % frequency;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this.init();\n\n        if (!this.config.demand) {\n          this.begin();\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this.isDestroy = true;\n        this.destroy();\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!changes.config.firstChange) {\n          this.restart();\n        }\n      }\n    }]);\n\n    return CountdownComponent;\n  }();\n\n  CountdownComponent.ɵfac = function CountdownComponent_Factory(t) {\n    return new (t || CountdownComponent)(ɵngcc0.ɵɵdirectiveInject(LOCALE_ID), ɵngcc0.ɵɵdirectiveInject(CountdownTimer), ɵngcc0.ɵɵdirectiveInject(CountdownGlobalConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  CountdownComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CountdownComponent,\n    selectors: [[\"countdown\"]],\n    hostVars: 2,\n    hostBindings: function CountdownComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"count-down\", true);\n      }\n    },\n    inputs: {\n      config: \"config\",\n      render: \"render\"\n    },\n    outputs: {\n      event: \"event\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 5,\n    consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"innerHTML\"]],\n    template: function CountdownComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, CountdownComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(1, CountdownComponent_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.render);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.render)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx.i));\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CountdownComponent;\n}();\n\nvar CountdownModule = /*@__PURE__*/function () {\n  var CountdownModule = function CountdownModule() {\n    _classCallCheck(this, CountdownModule);\n  };\n\n  CountdownModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CountdownModule\n  });\n  CountdownModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function CountdownModule_Factory(t) {\n      return new (t || CountdownModule)();\n    },\n    providers: [CountdownTimer],\n    imports: [[CommonModule]]\n  });\n  return CountdownModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CountdownModule, {\n    declarations: function declarations() {\n      return [CountdownComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [CountdownComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CountdownComponent, CountdownGlobalConfig, CountdownModule, CountdownStatus, CountdownTimer };","map":null,"metadata":{},"sourceType":"module"}