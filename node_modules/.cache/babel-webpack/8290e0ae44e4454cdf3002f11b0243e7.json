{"ast":null,"code":"import _classCallCheck from \"C:/Users/DTI_UCH/Desktop/template_angularjs10/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/DTI_UCH/Desktop/template_angularjs10/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, LOCALE_ID, Inject, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { formatDate, CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction CountdownComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"span\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r0.i.text, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction CountdownComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nvar _c0 = function _c0(a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nvar CountdownStatus;\n\n(function (CountdownStatus) {\n  CountdownStatus[CountdownStatus[\"ing\"] = 0] = \"ing\";\n  CountdownStatus[CountdownStatus[\"pause\"] = 1] = \"pause\";\n  CountdownStatus[CountdownStatus[\"stop\"] = 2] = \"stop\";\n  CountdownStatus[CountdownStatus[\"done\"] = 3] = \"done\";\n})(CountdownStatus || (CountdownStatus = {}));\n\nvar CountdownTimer = /*#__PURE__*/function () {\n  function CountdownTimer(ngZone) {\n    _classCallCheck(this, CountdownTimer);\n\n    this.ngZone = ngZone;\n    this.fns = [];\n    this.commands = [];\n    this.ing = false;\n  }\n\n  _createClass(CountdownTimer, [{\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      if (this.ing === true) {\n        return;\n      }\n\n      this.ing = true;\n      this.nextTime = +new Date();\n      this.ngZone.runOutsideAngular(function () {\n        _this.process();\n      });\n    }\n  }, {\n    key: \"process\",\n    value: function process() {\n      var _this2 = this;\n\n      while (this.commands.length) {\n        this.commands.shift()();\n      }\n\n      var diff = +new Date() - this.nextTime;\n      var count = 1 + Math.floor(diff / 100);\n      diff = 100 - diff % 100;\n      this.nextTime += 100 * count;\n\n      for (var i = 0, len = this.fns.length; i < len; i += 2) {\n        var frequency = this.fns[i + 1]; // 100/s\n\n        if (0 === frequency) {\n          this.fns[i](count); // 1000/s\n        } else {\n          // 先把末位至0，再每次加2\n          frequency += 2 * count - 1;\n          var step = Math.floor(frequency / 20);\n\n          if (step > 0) {\n            this.fns[i](step);\n          } // 把末位还原成1\n\n\n          this.fns[i + 1] = frequency % 20 + 1;\n        }\n      }\n\n      if (!this.ing) {\n        return;\n      }\n\n      setTimeout(function () {\n        return _this2.process();\n      }, diff);\n    }\n  }, {\n    key: \"add\",\n    value: function add(fn, frequency) {\n      var _this3 = this;\n\n      this.commands.push(function () {\n        _this3.fns.push(fn);\n\n        _this3.fns.push(frequency === 1000 ? 1 : 0);\n\n        _this3.ing = true;\n      });\n      return this;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(fn) {\n      var _this4 = this;\n\n      this.commands.push(function () {\n        var i = _this4.fns.indexOf(fn);\n\n        if (i !== -1) {\n          _this4.fns.splice(i, 2);\n        }\n\n        _this4.ing = _this4.fns.length > 0;\n      });\n      return this;\n    }\n  }]);\n\n  return CountdownTimer;\n}();\n\nCountdownTimer.ɵfac = function CountdownTimer_Factory(t) {\n  return new (t || CountdownTimer)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nCountdownTimer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: CountdownTimer,\n  factory: CountdownTimer.ɵfac\n});\n\nCountdownTimer.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CountdownTimer, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})(); // tslint:disable: no-inferrable-types\n\n\nvar CountdownGlobalConfig = function CountdownGlobalConfig(locale) {\n  var _this5 = this;\n\n  _classCallCheck(this, CountdownGlobalConfig);\n\n  this.locale = locale;\n  this.demand = false;\n  this.leftTime = 0;\n  this.format = 'HH:mm:ss';\n  this.timezone = '+0000';\n\n  this.formatDate = function (_ref) {\n    var date = _ref.date,\n        formatStr = _ref.formatStr,\n        timezone = _ref.timezone;\n    return formatDate(new Date(date), formatStr, _this5.locale, timezone || _this5.timezone || '+0000'); // tslint:disable-next-line: semicolon\n  };\n};\n\nCountdownGlobalConfig.ɵfac = function CountdownGlobalConfig_Factory(t) {\n  return new (t || CountdownGlobalConfig)(ɵngcc0.ɵɵinject(LOCALE_ID));\n};\n\nCountdownGlobalConfig.ɵprov = ɵɵdefineInjectable({\n  factory: function CountdownGlobalConfig_Factory() {\n    return new CountdownGlobalConfig(ɵɵinject(LOCALE_ID));\n  },\n  token: CountdownGlobalConfig,\n  providedIn: \"root\"\n});\n\nCountdownGlobalConfig.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [LOCALE_ID]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CountdownGlobalConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }];\n  }, null);\n})();\n\nvar CountdownComponent = /*#__PURE__*/function () {\n  function CountdownComponent(locale, timer, defCog, cdr, ngZone) {\n    _classCallCheck(this, CountdownComponent);\n\n    this.locale = locale;\n    this.timer = timer;\n    this.defCog = defCog;\n    this.cdr = cdr;\n    this.ngZone = ngZone;\n    this.frequency = 1000;\n    this._notify = {};\n    this.status = CountdownStatus.ing;\n    this.isDestroy = false;\n    this.i = {};\n    this.left = 0;\n    this.event = new EventEmitter();\n  }\n  /**\n   * Start countdown, you must manually call when `demand: false`\n   */\n\n\n  _createClass(CountdownComponent, [{\n    key: \"begin\",\n    value: function begin() {\n      this.status = CountdownStatus.ing;\n      this.callEvent('start');\n    }\n    /**\n     * Restart countdown\n     */\n\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      if (this.status !== CountdownStatus.stop) {\n        this.destroy();\n      }\n\n      this.init();\n      this.callEvent('restart');\n    }\n    /**\n     * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.status === CountdownStatus.stop) {\n        return;\n      }\n\n      this.status = CountdownStatus.stop;\n      this.destroy();\n      this.callEvent('stop');\n    }\n    /**\n     * Pause countdown, you can use `resume` to recover again\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      if (this.status === CountdownStatus.stop || this.status === CountdownStatus.pause) {\n        return;\n      }\n\n      this.status = CountdownStatus.pause;\n      this.callEvent('pause');\n    }\n    /**\n     * Resume countdown\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (this.status === CountdownStatus.stop || this.status !== CountdownStatus.pause) {\n        return;\n      }\n\n      this.status = CountdownStatus.ing;\n      this.callEvent('resume');\n    }\n  }, {\n    key: \"callEvent\",\n    value: function callEvent(action) {\n      this.event.emit({\n        action: action,\n        left: this.left,\n        status: this.status,\n        text: this.i.text\n      });\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this6 = this;\n\n      var locale = this.locale,\n          defCog = this.defCog;\n      var config = this.config = Object.assign(Object.assign(Object.assign({}, new CountdownGlobalConfig(locale)), defCog), this.config); // tslint:disable-next-line: no-bitwise\n\n      var frq = this.frequency = ~config.format.indexOf('S') ? 100 : 1000;\n      this.status = config.demand ? CountdownStatus.pause : CountdownStatus.ing;\n      this.getLeft(); // bind reflow to me\n\n      var _reflow = this.reflow;\n\n      this.reflow = function () {\n        var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        return _reflow.apply(_this6, [count, force]);\n      };\n\n      if (Array.isArray(config.notify)) {\n        config.notify.forEach(function (time) {\n          if (time < 1) {\n            throw new Error(\"The notify config must be a positive integer.\");\n          }\n\n          time = time * 1000;\n          time = time - time % frq;\n          _this6._notify[time] = true;\n        });\n      }\n\n      this.timer.add(this.reflow, frq).start();\n      this.reflow(0, true);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.timer.remove(this.reflow);\n      return this;\n    }\n    /**\n     * 更新时钟\n     */\n\n  }, {\n    key: \"reflow\",\n    value: function reflow() {\n      var _this7 = this;\n\n      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (this.isDestroy) {\n        return;\n      }\n\n      var status = this.status,\n          config = this.config,\n          _notify = this._notify;\n\n      if (!force && status !== CountdownStatus.ing) {\n        return;\n      }\n\n      var value = this.left = this.left - this.frequency * count;\n\n      if (value < 1) {\n        value = 0;\n      }\n\n      this.i = {\n        value: value,\n        text: config.formatDate({\n          date: value,\n          formatStr: config.format,\n          timezone: config.timezone\n        })\n      };\n\n      if (typeof config.prettyText === 'function') {\n        this.i.text = config.prettyText(this.i.text);\n      }\n\n      this.cdr.detectChanges();\n\n      if (config.notify === 0 || _notify[value]) {\n        this.ngZone.run(function () {\n          _this7.callEvent('notify');\n        });\n      }\n\n      if (value === 0) {\n        this.ngZone.run(function () {\n          _this7.status = CountdownStatus.done;\n\n          _this7.callEvent('done');\n\n          _this7.destroy();\n        });\n      }\n    }\n    /**\n     * 获取倒计时剩余帧数\n     */\n\n  }, {\n    key: \"getLeft\",\n    value: function getLeft() {\n      var config = this.config,\n          frequency = this.frequency;\n      var left = config.leftTime * 1000;\n      var end = config.stopTime;\n\n      if (!left && end) {\n        left = end - new Date().getTime();\n      }\n\n      this.left = left - left % frequency;\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.init();\n\n      if (!this.config.demand) {\n        this.begin();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.isDestroy = true;\n      this.destroy();\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (!changes.config.firstChange) {\n        this.restart();\n      }\n    }\n  }]);\n\n  return CountdownComponent;\n}();\n\nCountdownComponent.ɵfac = function CountdownComponent_Factory(t) {\n  return new (t || CountdownComponent)(ɵngcc0.ɵɵdirectiveInject(LOCALE_ID), ɵngcc0.ɵɵdirectiveInject(CountdownTimer), ɵngcc0.ɵɵdirectiveInject(CountdownGlobalConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCountdownComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CountdownComponent,\n  selectors: [[\"countdown\"]],\n  hostVars: 2,\n  hostBindings: function CountdownComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"count-down\", true);\n    }\n  },\n  inputs: {\n    config: \"config\",\n    render: \"render\"\n  },\n  outputs: {\n    event: \"event\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 5,\n  consts: [[4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"innerHTML\"]],\n  template: function CountdownComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, CountdownComponent_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      ɵngcc0.ɵɵtemplate(1, CountdownComponent_ng_container_1_Template, 1, 0, \"ng-container\", 1);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.render);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.render)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(3, _c0, ctx.i));\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nCountdownComponent.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [LOCALE_ID]\n    }]\n  }, {\n    type: CountdownTimer\n  }, {\n    type: CountdownGlobalConfig\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }];\n};\n\nCountdownComponent.propDecorators = {\n  config: [{\n    type: Input\n  }],\n  render: [{\n    type: Input\n  }],\n  event: [{\n    type: Output\n  }]\n};\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CountdownComponent, [{\n    type: Component,\n    args: [{\n      selector: 'countdown',\n      template: \"\\n    <ng-container *ngIf=\\\"!render\\\">\\n      <span [innerHTML]=\\\"i.text\\\"></span>\\n    </ng-container>\\n    <ng-container *ngTemplateOutlet=\\\"render; context: { $implicit: i }\\\"></ng-container>\\n  \",\n      host: {\n        '[class.count-down]': 'true'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [LOCALE_ID]\n      }]\n    }, {\n      type: CountdownTimer\n    }, {\n      type: CountdownGlobalConfig\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    event: [{\n      type: Output\n    }],\n    config: [{\n      type: Input\n    }],\n    render: [{\n      type: Input\n    }]\n  });\n})();\n\nvar CountdownModule = function CountdownModule() {\n  _classCallCheck(this, CountdownModule);\n};\n\nCountdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CountdownModule\n});\nCountdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CountdownModule_Factory(t) {\n    return new (t || CountdownModule)();\n  },\n  providers: [CountdownTimer],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CountdownModule, {\n    declarations: function declarations() {\n      return [CountdownComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [CountdownComponent];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CountdownModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [CountdownTimer],\n      declarations: [CountdownComponent],\n      exports: [CountdownComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CountdownComponent, CountdownGlobalConfig, CountdownModule, CountdownStatus, CountdownTimer };","map":{"version":3,"sources":["../../lib/src/interfaces.ts","../../lib/src/countdown.timer.ts","../../lib/src/countdown.config.ts","../../lib/src/countdown.component.ts","../../lib/src/countdown.module.ts","../../lib/src/ngx-countdown.ts"],"names":[],"mappings":"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","sourcesContent":["export type CountdownFormatFn = (opt: CountdownFormatFnOption) => string;\n\nexport interface CountdownFormatFnOption {\n  date: number;\n  formatStr: string;\n  timezone?: string;\n}\n\nexport enum CountdownStatus {\n  ing,\n  pause,\n  stop,\n  done,\n}\n\nexport interface CountdownConfig {\n  /**\n   * Start the counter on demand, must call `begin()` to starting, Default: `false`\n   */\n  demand?: boolean;\n\n  /**\n   * Calculate the remaining time based on the server, e.g: `10`,`5.5`, (Unit: seconds)\n   */\n  leftTime?: number;\n\n  /**\n   * Refers to counting down from local time to end time (Unit: Milliseconds second UNIX timestamp)\n   */\n  stopTime?: number;\n\n  /**\n   * Formats a date value, pls refer to [Accepted patterns](https://angular.io/api/common/DatePipe#usage-notes), Default: `HH:mm:ss`\n   */\n  format?: string;\n\n  /**\n   * Beautify text, generally used to convert formatted time text into HTML\n   */\n  prettyText?: (text: string) => string;\n\n  /**\n   * Should be trigger type `notify` event on the x second. When values is `0` will be trigger every time.\n   */\n  notify?: number[] | number;\n\n  /**\n   * Default based on the implementation of `formatDate` in `@angular/common`\n   *\n   * You can changed to other libs, e.g: [date-fns](https://date-fns.org/v2.0.1/docs/format)\n   */\n  formatDate?: CountdownFormatFn;\n\n  /**\n   * A timezone offset (such as '+0430'), or a standard UTC/GMT. When not supplied, uses the end-user's local system timezone, Default: `+0000`\n   */\n  timezone?: string;\n}\n\nexport type CountdownEventAction = 'start' | 'stop' | 'restart' | 'pause' | 'resume' | 'notify' | 'done';\n\nexport interface CountdownEvent {\n  action: CountdownEventAction;\n  status: CountdownStatus;\n  left: number;\n  text: string;\n}\n\nexport interface CountdownItem {\n  text?: string;\n  value?: number;\n}\n","import { Injectable, NgZone } from '@angular/core';\n\n@Injectable()\nexport class CountdownTimer {\n  private fns: Array<((count: number) => number | void) | number> = [];\n  private commands: Array<() => void> = [];\n  private nextTime: number;\n  private ing = false;\n\n  constructor(private ngZone: NgZone) {}\n\n  start(): void {\n    if (this.ing === true) {\n      return;\n    }\n\n    this.ing = true;\n    this.nextTime = +new Date();\n    this.ngZone.runOutsideAngular(() => {\n      this.process();\n    });\n  }\n\n  private process(): void {\n    while (this.commands.length) {\n      this.commands.shift()();\n    }\n    let diff = +new Date() - this.nextTime;\n    const count = 1 + Math.floor(diff / 100);\n\n    diff = 100 - (diff % 100);\n    this.nextTime += 100 * count;\n\n    for (let i = 0, len = this.fns.length; i < len; i += 2) {\n      let frequency = this.fns[i + 1] as number;\n\n      // 100/s\n      if (0 === frequency) {\n        (this.fns[i] as (count: number) => void)(count);\n        // 1000/s\n      } else {\n        // 先把末位至0，再每次加2\n        frequency += 2 * count - 1;\n\n        const step = Math.floor(frequency / 20);\n        if (step > 0) {\n          (this.fns[i] as (count: number) => void)(step);\n        }\n\n        // 把末位还原成1\n        this.fns[i + 1] = (frequency % 20) + 1;\n      }\n    }\n\n    if (!this.ing) {\n      return;\n    }\n\n    setTimeout(() => this.process(), diff);\n  }\n\n  add(fn: () => void, frequency: number): this {\n    this.commands.push(() => {\n      this.fns.push(fn);\n      this.fns.push(frequency === 1000 ? 1 : 0);\n      this.ing = true;\n    });\n    return this;\n  }\n\n  remove(fn: () => void): this {\n    this.commands.push(() => {\n      const i = this.fns.indexOf(fn);\n      if (i !== -1) {\n        this.fns.splice(i, 2);\n      }\n      this.ing = this.fns.length > 0;\n    });\n    return this;\n  }\n}\n","// tslint:disable: no-inferrable-types\nimport { Injectable, Inject, LOCALE_ID } from '@angular/core';\nimport { formatDate } from '@angular/common';\nimport { CountdownFormatFn, CountdownConfig } from './interfaces';\n\n@Injectable({ providedIn: 'root' })\nexport class CountdownGlobalConfig implements CountdownConfig {\n  constructor(@Inject(LOCALE_ID) private locale: string) {}\n\n  demand?: boolean = false;\n\n  leftTime?: number = 0;\n\n  format?: string = 'HH:mm:ss';\n\n  timezone?: string = '+0000';\n\n  formatDate?: CountdownFormatFn = ({ date, formatStr, timezone }) => {\n    return formatDate(new Date(date), formatStr, this.locale, timezone || this.timezone || '+0000');\n    // tslint:disable-next-line: semicolon\n  };\n}\n","import {\n  Component,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy,\n  Output,\n  EventEmitter,\n  OnInit,\n  SimpleChange,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  Inject,\n  LOCALE_ID,\n  ChangeDetectorRef,\n  TemplateRef,\n  NgZone,\n} from '@angular/core';\n\nimport { CountdownConfig, CountdownStatus, CountdownEvent, CountdownEventAction, CountdownItem } from './interfaces';\nimport { CountdownTimer } from './countdown.timer';\nimport { CountdownGlobalConfig } from './countdown.config';\n\n@Component({\n  selector: 'countdown',\n  template: `\n    <ng-container *ngIf=\"!render\">\n      <span [innerHTML]=\"i.text\"></span>\n    </ng-container>\n    <ng-container *ngTemplateOutlet=\"render; context: { $implicit: i }\"></ng-container>\n  `,\n  host: { '[class.count-down]': 'true' },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CountdownComponent implements OnInit, OnChanges, OnDestroy {\n  private frequency = 1000;\n  private _notify: { [key: number]: boolean } = {};\n  private status: CountdownStatus = CountdownStatus.ing;\n  private isDestroy = false;\n  i: CountdownItem = {};\n  left = 0;\n\n  @Input() config: CountdownConfig;\n  @Input() render: TemplateRef<void>;\n  @Output() readonly event = new EventEmitter<CountdownEvent>();\n\n  constructor(\n    @Inject(LOCALE_ID) private locale: string,\n    private timer: CountdownTimer,\n    private defCog: CountdownGlobalConfig,\n    private cdr: ChangeDetectorRef,\n    private ngZone: NgZone,\n  ) {}\n\n  /**\n   * Start countdown, you must manually call when `demand: false`\n   */\n  begin(): void {\n    this.status = CountdownStatus.ing;\n    this.callEvent('start');\n  }\n\n  /**\n   * Restart countdown\n   */\n  restart(): void {\n    if (this.status !== CountdownStatus.stop) {\n      this.destroy();\n    }\n    this.init();\n    this.callEvent('restart');\n  }\n\n  /**\n   * Stop countdown, must call `restart` when stopped, it's different from pause, unable to recover\n   */\n  stop(): void {\n    if (this.status === CountdownStatus.stop) {\n      return;\n    }\n    this.status = CountdownStatus.stop;\n    this.destroy();\n    this.callEvent('stop');\n  }\n\n  /**\n   * Pause countdown, you can use `resume` to recover again\n   */\n  pause(): void {\n    if (this.status === CountdownStatus.stop || this.status === CountdownStatus.pause) {\n      return;\n    }\n    this.status = CountdownStatus.pause;\n    this.callEvent('pause');\n  }\n\n  /**\n   * Resume countdown\n   */\n  resume(): void {\n    if (this.status === CountdownStatus.stop || this.status !== CountdownStatus.pause) {\n      return;\n    }\n    this.status = CountdownStatus.ing;\n    this.callEvent('resume');\n  }\n\n  private callEvent(action: CountdownEventAction): void {\n    this.event.emit({ action, left: this.left, status: this.status, text: this.i.text });\n  }\n\n  private init(): void {\n    const { locale, defCog } = this;\n    const config = (this.config = {\n      ...new CountdownGlobalConfig(locale),\n      ...defCog,\n      ...this.config,\n    });\n    // tslint:disable-next-line: no-bitwise\n    const frq = (this.frequency = ~config.format.indexOf('S') ? 100 : 1000);\n    this.status = config.demand ? CountdownStatus.pause : CountdownStatus.ing;\n\n    this.getLeft();\n\n    // bind reflow to me\n    const _reflow = this.reflow;\n    this.reflow = (count: number = 0, force: boolean = false) => _reflow.apply(this, [count, force]);\n\n    if (Array.isArray(config.notify)) {\n      config.notify.forEach((time: number) => {\n        if (time < 1) {\n          throw new Error(`The notify config must be a positive integer.`);\n        }\n\n        time = time * 1000;\n        time = time - (time % frq);\n        this._notify[time] = true;\n      });\n    }\n\n    this.timer.add(this.reflow, frq).start();\n\n    this.reflow(0, true);\n  }\n\n  private destroy(): this {\n    this.timer.remove(this.reflow);\n    return this;\n  }\n\n  /**\n   * 更新时钟\n   */\n  private reflow(count: number = 0, force: boolean = false): void {\n    if (this.isDestroy) {\n      return;\n    }\n\n    const { status, config, _notify } = this;\n    if (!force && status !== CountdownStatus.ing) {\n      return;\n    }\n\n    let value = (this.left = this.left - this.frequency * count);\n    if (value < 1) {\n      value = 0;\n    }\n    this.i = {\n      value,\n      text: config.formatDate({ date: value, formatStr: config.format, timezone: config.timezone }),\n    };\n    if (typeof config.prettyText === 'function') {\n      this.i.text = config.prettyText(this.i.text);\n    }\n    this.cdr.detectChanges();\n\n    if (config.notify === 0 || _notify[value]) {\n      this.ngZone.run(() => {\n        this.callEvent('notify');\n      });\n    }\n\n    if (value === 0) {\n      this.ngZone.run(() => {\n        this.status = CountdownStatus.done;\n        this.callEvent('done');\n        this.destroy();\n      });\n    }\n  }\n\n  /**\n   * 获取倒计时剩余帧数\n   */\n  private getLeft(): void {\n    const { config, frequency } = this;\n    let left = config.leftTime * 1000;\n    const end = config.stopTime;\n\n    if (!left && end) {\n      left = end - new Date().getTime();\n    }\n\n    this.left = left - (left % frequency);\n  }\n\n  ngOnInit(): void {\n    this.init();\n    if (!this.config.demand) {\n      this.begin();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.isDestroy = true;\n    this.destroy();\n  }\n\n  ngOnChanges(changes: { [P in keyof this]?: SimpleChange } & SimpleChanges): void {\n    if (!changes.config.firstChange) {\n      this.restart();\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { CountdownComponent } from './countdown.component';\nimport { CountdownTimer } from './countdown.timer';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [CountdownTimer],\n  declarations: [CountdownComponent],\n  exports: [CountdownComponent],\n})\nexport class CountdownModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]},"metadata":{},"sourceType":"module"}