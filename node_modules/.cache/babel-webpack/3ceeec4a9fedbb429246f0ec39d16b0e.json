{"ast":null,"code":"import _toConsumableArray from \"C:/Users/DTI_UCH/Desktop/template_angularjs10/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/DTI_UCH/Desktop/template_angularjs10/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/DTI_UCH/Desktop/template_angularjs10/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Inject, PLATFORM_ID, Optional, ɵɵdefineInjectable, ɵɵinject, Injectable, Input, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { Subject, of, timer, combineLatest } from 'rxjs';\nimport { take, map, tap, startWith, switchMap, shareReplay } from 'rxjs/operators';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction LoadingBarComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r2.diameter)(\"height\", ctx_r2.diameter);\n  }\n}\n\nfunction LoadingBarComponent_ng_container_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 5);\n  }\n\n  if (rf & 2) {\n    var progress_r1 = ɵngcc0.ɵɵnextContext().ngIf;\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"background\", ctx_r3.color)(\"height\", ctx_r3.height)(\"width\", progress_r1 + \"%\");\n  }\n}\n\nfunction LoadingBarComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, LoadingBarComponent_ng_container_0_div_1_Template, 2, 4, \"div\", 1);\n    ɵngcc0.ɵɵtemplate(2, LoadingBarComponent_ng_container_0_div_2_Template, 1, 6, \"div\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.includeSpinner);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.includeBar);\n  }\n}\n\nvar LoadingBarState = /*#__PURE__*/function () {\n  function LoadingBarState() {\n    var _this = this;\n\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, LoadingBarState);\n\n    this.config = config;\n    this.state = {\n      action: null,\n      value: 0,\n      initialValue: 0\n    };\n    this.requests = null;\n    this.disabled = false;\n    this.stream$ = new Subject();\n    this._value$ = null;\n\n    this.timer$ = function (s) {\n      var state$ = of(s);\n\n      switch (s.action) {\n        case 'start':\n        case 'increment':\n        case 'set':\n          {\n            if (s.action === 'start' && _this.config.latencyThreshold === 0 && s.value === 0) {\n              s.value = s.initialValue;\n            }\n\n            if (_this.requests > 0) {\n              state$ = timer(_this.config.latencyThreshold, 250).pipe(map(function (t) {\n                return Object.assign(Object.assign({}, s), {\n                  value: t === 0 ? _this.state.value || s.initialValue : _this._increment()\n                });\n              }));\n            }\n\n            break;\n          }\n\n        case 'complete':\n        case 'stop':\n          {\n            // Attempt to aggregate any start/complete calls within 500ms:\n            state$ = s.value === 0 ? of(Object.assign({}, s)) : timer(0, 500).pipe(take(2), map(function (t) {\n              return {\n                value: t === 0 ? 100 : 0\n              };\n            }));\n            break;\n          }\n      }\n\n      return state$.pipe(map(function (next) {\n        return Object.assign(Object.assign({}, next), {\n          action: 'set'\n        });\n      }), tap(function (next) {\n        return _this.next(next, false);\n      }));\n    };\n\n    this.config = Object.assign({\n      latencyThreshold: 0\n    }, config);\n  }\n\n  _createClass(LoadingBarState, [{\n    key: \"value$\",\n    get: function get() {\n      var _this2 = this;\n\n      if (this._value$) {\n        return this._value$;\n      }\n\n      return this._value$ = this.stream$.asObservable().pipe(startWith(this.state), switchMap(function (s) {\n        return _this2.timer$(s);\n      }), shareReplay(), map(function (s) {\n        return s.value;\n      }));\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n\n      if (this.disabled) {\n        return;\n      }\n\n      this.next({\n        action: 'start',\n        initialValue: initialValue\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this.next({\n        action: 'stop'\n      });\n    }\n  }, {\n    key: \"complete\",\n    value: function complete() {\n      this.next({\n        action: 'complete'\n      });\n    }\n  }, {\n    key: \"disable\",\n    value: function disable() {\n      this.disabled = true;\n    }\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      this.next({\n        action: 'set',\n        value: value\n      });\n    }\n  }, {\n    key: \"increment\",\n    value: function increment() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this.next({\n        action: 'increment',\n        value: value\n      });\n    }\n  }, {\n    key: \"next\",\n    value: function next(state) {\n      var emitEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      switch (state.action) {\n        case 'start':\n          this.requests = (this.requests || 0) + 1;\n          break;\n\n        case 'complete':\n          this.requests = (this.requests || 1) - 1;\n\n          if (this.requests > 0) {\n            return;\n          }\n\n          break;\n\n        case 'stop':\n          this.requests = 0;\n          break;\n\n        case 'increment':\n          state.value = this._increment(state.value);\n          break;\n      }\n\n      this.state = Object.assign(Object.assign(Object.assign({}, this.state), {\n        action: null\n      }), state);\n\n      if (emitEvent) {\n        this.stream$.next(this.state);\n      }\n    }\n  }, {\n    key: \"_increment\",\n    value: function _increment() {\n      var rnd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var stat = this.state.value;\n\n      if (stat >= 99) {\n        rnd = 0;\n      }\n\n      if (rnd === 0) {\n        if (stat >= 0 && stat < 25) {\n          // Start out between 3 - 6% increments\n          rnd = Math.random() * (5 - 3 + 1) + 3;\n        } else if (stat >= 25 && stat < 65) {\n          // increment between 0 - 3%\n          rnd = Math.random() * 3;\n        } else if (stat >= 65 && stat < 90) {\n          // increment between 0 - 2%\n          rnd = Math.random() * 2;\n        } else if (stat >= 90 && stat < 99) {\n          // finally, increment it .5 %\n          rnd = 0.5;\n        } else {\n          // after 99%, don't increment:\n          rnd = 0;\n        }\n      }\n\n      return rnd + stat;\n    }\n  }]);\n\n  return LoadingBarState;\n}();\n\nvar LOADING_BAR_CONFIG = /*@__PURE__*/new InjectionToken('LOADING_BAR_CONFIG');\n\nvar LoadingBarService = /*@__PURE__*/function () {\n  var LoadingBarService = /*#__PURE__*/function () {\n    function LoadingBarService(platformId) {\n      var _this3 = this;\n\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, LoadingBarService);\n\n      this.platformId = platformId;\n      this.config = config;\n      this.refs = {};\n      this.streams$ = new Subject();\n      this.value$ = this.streams$.asObservable().pipe(startWith(null), switchMap(function () {\n        return combineLatest.apply(void 0, _toConsumableArray(Object.keys(_this3.refs).map(function (s) {\n          return _this3.refs[s].value$;\n        })));\n      }), map(function (v) {\n        return Math.max.apply(Math, [0].concat(_toConsumableArray(v)));\n      }));\n    }\n    /** @deprecated use `value$` instead. */\n\n\n    _createClass(LoadingBarService, [{\n      key: \"progress$\",\n      get: function get() {\n        return this.value$;\n      }\n      /** @deprecated use `useRef` instead. */\n\n    }, {\n      key: \"start\",\n      value: function start() {\n        var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n        this.useRef().start(initialValue);\n      }\n      /** @deprecated use `useRef` instead. */\n\n    }, {\n      key: \"set\",\n      value: function set(value) {\n        this.useRef().set(value);\n      }\n      /** @deprecated use `useRef` instead. */\n\n    }, {\n      key: \"increment\",\n      value: function increment(value) {\n        this.useRef().increment(value);\n      }\n      /** @deprecated use `useRef` instead. */\n\n    }, {\n      key: \"complete\",\n      value: function complete() {\n        this.useRef().complete();\n      }\n      /** @deprecated use `useRef` instead. */\n\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        this.useRef().stop();\n      }\n    }, {\n      key: \"useRef\",\n      value: function useRef() {\n        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n\n        if (!this.refs[id]) {\n          this.refs[id] = new LoadingBarState(this.config);\n          this.streams$.next();\n\n          if (!isPlatformBrowser(this.platformId)) {\n            this.refs[id].disable();\n          }\n        }\n\n        return this.refs[id];\n      }\n    }]);\n\n    return LoadingBarService;\n  }();\n\n  LoadingBarService.ɵfac = function LoadingBarService_Factory(t) {\n    return new (t || LoadingBarService)(ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(LOADING_BAR_CONFIG, 8));\n  };\n\n  LoadingBarService.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function LoadingBarService_Factory() {\n      return new LoadingBarService(ɵɵinject(PLATFORM_ID), ɵɵinject(LOADING_BAR_CONFIG, 8));\n    },\n    token: LoadingBarService,\n    providedIn: \"root\"\n  });\n  return LoadingBarService;\n}();\n\nvar LoadingBarComponent = /*@__PURE__*/function () {\n  var LoadingBarComponent = /*#__PURE__*/function () {\n    function LoadingBarComponent(loader) {\n      _classCallCheck(this, LoadingBarComponent);\n\n      this.loader = loader;\n      this.includeSpinner = true;\n      this.includeBar = true;\n      this.fixed = true;\n      this.color = '#29d';\n    }\n\n    _createClass(LoadingBarComponent, [{\n      key: \"value$\",\n      get: function get() {\n        return this.ref ? this.loader.useRef(this.ref).value$ : this.loader.value$;\n      }\n    }]);\n\n    return LoadingBarComponent;\n  }();\n\n  LoadingBarComponent.ɵfac = function LoadingBarComponent_Factory(t) {\n    return new (t || LoadingBarComponent)(ɵngcc0.ɵɵdirectiveInject(LoadingBarService));\n  };\n\n  LoadingBarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: LoadingBarComponent,\n    selectors: [[\"ngx-loading-bar\"]],\n    hostVars: 3,\n    hostBindings: function LoadingBarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"fixed\", ctx.fixed);\n        ɵngcc0.ɵɵstyleProp(\"color\", ctx.color);\n      }\n    },\n    inputs: {\n      includeSpinner: \"includeSpinner\",\n      includeBar: \"includeBar\",\n      fixed: \"fixed\",\n      color: \"color\",\n      value: \"value\",\n      ref: \"ref\",\n      height: \"height\",\n      diameter: \"diameter\"\n    },\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [\"class\", \"ngx-spinner\", 4, \"ngIf\"], [\"class\", \"ngx-bar\", 3, \"background\", \"height\", \"width\", 4, \"ngIf\"], [1, \"ngx-spinner\"], [1, \"ngx-spinner-icon\"], [1, \"ngx-bar\"]],\n    template: function LoadingBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, LoadingBarComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.value != null ? ctx.value : ɵngcc0.ɵɵpipeBind1(1, 1, ctx.value$));\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    pipes: [ɵngcc1.AsyncPipe],\n    styles: [\"[_nghost-%COMP%]{position:relative;display:block;pointer-events:none}[_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]{transition:350ms linear;display:block;position:absolute;top:5px;left:0}[_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]   .ngx-spinner-icon[_ngcontent-%COMP%]{width:14px;height:14px;border:2px solid transparent;border-top-color:inherit;border-left-color:inherit;border-radius:50%;-webkit-animation:.4s linear infinite loading-bar-spinner;animation:.4s linear infinite loading-bar-spinner}[_nghost-%COMP%]   .ngx-bar[_ngcontent-%COMP%]{transition:width 350ms;position:absolute;top:0;left:0;width:100%;height:2px;border-bottom-right-radius:1px;border-top-right-radius:1px}[dir=rtl]   [_nghost-%COMP%]   .ngx-bar[_ngcontent-%COMP%]{right:0;left:unset}[fixed=true][_nghost-%COMP%]{z-index:10002}[fixed=true][_nghost-%COMP%]   .ngx-bar[_ngcontent-%COMP%]{position:fixed}[fixed=true][_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]{position:fixed;top:10px;left:10px}[dir=rtl]   [fixed=true][_nghost-%COMP%]   .ngx-spinner[_ngcontent-%COMP%]{right:10px;left:unset}@-webkit-keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes loading-bar-spinner{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}\"],\n    changeDetection: 0\n  });\n  return LoadingBarComponent;\n}();\n\nvar LoadingBarModule = /*@__PURE__*/function () {\n  var LoadingBarModule = function LoadingBarModule() {\n    _classCallCheck(this, LoadingBarModule);\n  };\n\n  LoadingBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: LoadingBarModule\n  });\n  LoadingBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function LoadingBarModule_Factory(t) {\n      return new (t || LoadingBarModule)();\n    },\n    imports: [[CommonModule]]\n  });\n  return LoadingBarModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarModule, {\n    declarations: function declarations() {\n      return [LoadingBarComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [LoadingBarComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { LOADING_BAR_CONFIG, LoadingBarComponent, LoadingBarModule, LoadingBarService };","map":null,"metadata":{},"sourceType":"module"}