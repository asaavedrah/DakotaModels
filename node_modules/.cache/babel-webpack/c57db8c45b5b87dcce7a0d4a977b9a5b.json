{"ast":null,"code":"import _classCallCheck from \"C:/Users/DTI_UCH/Desktop/template_angularjs10/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/DTI_UCH/Desktop/template_angularjs10/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __metadata } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, EventEmitter, ElementRef, NgZone, Input, Output, Directive, InjectionToken, NgModule } from '@angular/core';\nimport * as Chart from 'chart.js';\nimport { plugins } from 'chart.js';\nimport * as ɵngcc0 from '@angular/core';\n\nvar StoreService = /*#__PURE__*/function () {\n  function StoreService() {\n    _classCallCheck(this, StoreService);\n\n    this._chartInstances = [];\n    this._chartId = [];\n  }\n\n  _createClass(StoreService, [{\n    key: \"addChart\",\n    value: function addChart(id, chart) {\n      for (var i = 0; i < this._chartId.length; i++) {\n        if (id === this._chartId[i]) {\n          return;\n        }\n      }\n\n      this._chartId.push(id);\n\n      this._chartInstances.push(chart);\n    }\n  }, {\n    key: \"removeChart\",\n    value: function removeChart(id) {\n      for (var i = 0; i < this._chartId.length; i++) {\n        if (id === this._chartId[i]) {\n          this._chartId.splice(i, 1);\n\n          this._chartInstances.splice(i, 1); // delete chart instance.\n\n        }\n      }\n    }\n  }, {\n    key: \"getChart\",\n    value: function getChart(id) {\n      for (var i = 0; i < this._chartId.length; i++) {\n        if (id === this._chartId[i]) {\n          return this._chartInstances[i];\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return StoreService;\n}();\n\nStoreService.ɵfac = function StoreService_Factory(t) {\n  return new (t || StoreService)();\n};\n\nStoreService.ɵprov = ɵɵdefineInjectable({\n  factory: function StoreService_Factory() {\n    return new StoreService();\n  },\n  token: StoreService,\n  providedIn: \"root\"\n});\n\nvar PluginConfig = function PluginConfig() {\n  _classCallCheck(this, PluginConfig);\n\n  this.plugins = [];\n};\n\nPluginConfig.ɵfac = function PluginConfig_Factory(t) {\n  return new (t || PluginConfig)();\n};\n\nPluginConfig.ɵprov = ɵɵdefineInjectable({\n  factory: function PluginConfig_Factory() {\n    return new PluginConfig();\n  },\n  token: PluginConfig,\n  providedIn: \"root\"\n});\n\nvar NgChartjsService = /*#__PURE__*/function () {\n  function NgChartjsService(storeService, pluginConfig) {\n    _classCallCheck(this, NgChartjsService);\n\n    this.storeService = storeService;\n    this.pluginConfig = pluginConfig;\n    var plugins$1 = pluginConfig.plugins;\n\n    if (plugins$1.length !== 0 || plugins$1) {\n      for (var i = 0; i < plugins$1.length; i++) {\n        if (plugins$1[i]) {\n          plugins.register(plugins$1[i]);\n        }\n      }\n    }\n  } // get chart instance by id\n\n\n  _createClass(NgChartjsService, [{\n    key: \"getChart\",\n    value: function getChart(id) {\n      return this.storeService.getChart(id);\n    }\n  }]);\n\n  return NgChartjsService;\n}();\n\nNgChartjsService.ɵfac = function NgChartjsService_Factory(t) {\n  return new (t || NgChartjsService)(ɵngcc0.ɵɵinject(StoreService), ɵngcc0.ɵɵinject(PluginConfig));\n};\n\nNgChartjsService.ctorParameters = function () {\n  return [{\n    type: StoreService\n  }, {\n    type: PluginConfig\n  }];\n};\n\nNgChartjsService.ɵprov = ɵɵdefineInjectable({\n  factory: function NgChartjsService_Factory() {\n    return new NgChartjsService(ɵɵinject(StoreService), ɵɵinject(PluginConfig));\n  },\n  token: NgChartjsService,\n  providedIn: \"root\"\n});\nNgChartjsService = __decorate([__metadata(\"design:paramtypes\", [StoreService, PluginConfig])], NgChartjsService); // Default colors\n\nvar DefaultColors = [[63, 81, 181], [0, 150, 136], [255, 152, 0], [233, 30, 99], [156, 39, 176], [0, 188, 212], [3, 169, 244], [96, 125, 139], [255, 193, 7], [37, 155, 36], [205, 220, 57], [86, 119, 252] // Blue\n];\n\nfunction rgba(colour, alpha) {\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction formatLineColor(colors) {\n  return {\n    backgroundColor: rgba(colors, 0.35),\n    borderColor: rgba(colors, 1),\n    pointBackgroundColor: rgba(colors, 1),\n    pointBorderColor: '#fff',\n    pointHoverBackgroundColor: '#fff',\n    pointHoverBorderColor: rgba(colors, 0.95)\n  };\n}\n\nfunction formatBarColor(colors) {\n  return {\n    backgroundColor: rgba(colors, 0.75),\n    borderColor: rgba(colors, 1),\n    hoverBackgroundColor: rgba(colors, 1),\n    hoverBorderColor: rgba(colors, 1)\n  };\n}\n\nfunction formatPieColors(colors) {\n  return {\n    backgroundColor: colors.map(function (color) {\n      return rgba(color, 0.76);\n    }),\n    borderColor: colors.map(function () {\n      return '#fff';\n    }),\n    pointBackgroundColor: colors.map(function (color) {\n      return rgba(color, 1);\n    }),\n    pointBorderColor: colors.map(function () {\n      return '#fff';\n    }),\n    pointHoverBackgroundColor: colors.map(function (color) {\n      return rgba(color, 1);\n    }),\n    pointHoverBorderColor: colors.map(function (color) {\n      return rgba(color, 1);\n    })\n  };\n}\n\nfunction formatPolarAreaColors(colors) {\n  return {\n    backgroundColor: colors.map(function (color) {\n      return rgba(color, 0.75);\n    }),\n    borderColor: colors.map(function (color) {\n      return rgba(color, 1);\n    }),\n    hoverBackgroundColor: colors.map(function (color) {\n      return rgba(color, 1);\n    }),\n    hoverBorderColor: colors.map(function (color) {\n      return rgba(color, 1);\n    })\n  };\n}\n\nfunction getRandomColor() {\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n* @method Generate colors for line|bar charts\n* @param index he index of the default color array. eg. 0, 1\n* @return number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\n\n\nfunction generateColor(index) {\n  return DefaultColors[index] || getRandomColor();\n}\n/**\n* @method Generate colors for pie|doughnut charts\n* @param count Length of data. eg. datasets.data.length\n* @return number[][]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\n\n\nfunction generateColors(count) {\n  var colorsArr = new Array(count);\n\n  for (var i = 0; i < count; i++) {\n    colorsArr[i] = DefaultColors[i] || getRandomColor();\n  }\n\n  return colorsArr;\n}\n/**\n* @method Generate colors by chart type\n* @param chartType The type of chart you are using. eg. line,bar\n* @param index The index of the default color array. eg. DefaultColors[index]\n* @param count Length of data. eg. datasets.data.length\n* @return Color or number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\n\n\nfunction getColors(chartType, index, count) {\n  if (chartType === 'pie' || chartType === 'doughnut' || chartType === 'bubble' || chartType === 'scatter') {\n    return formatPieColors(generateColors(count));\n  }\n\n  if (chartType === 'polarArea') {\n    return formatPolarAreaColors(generateColors(count));\n  }\n\n  if (chartType === 'line' || chartType === 'radar') {\n    return formatLineColor(generateColor(index));\n  }\n\n  if (chartType === 'bar' || chartType === 'horizontalBar') {\n    return formatBarColor(generateColor(index));\n  }\n\n  return generateColor(index);\n}\n/* tslint:disable-next-line */\n\n\nvar NgChartjsDirective = /*#__PURE__*/function () {\n  function NgChartjsDirective(element, ngChartjsService, storeService, zone) {\n    _classCallCheck(this, NgChartjsDirective);\n\n    this.ngChartjsService = ngChartjsService;\n    this.storeService = storeService;\n    this.zone = zone; // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut\n\n    this.labels = []; // 相当于chart.js的option\n\n    this.options = {};\n    this.noZone = true; // disable angular NgZone\n\n    this.id = null; // chart instance id\n    // 鼠标点击图表所有的区域\n\n    this.chartClick = new EventEmitter(); // 鼠标悬浮在标签或者活跃的点上面时\n\n    this.chartHover = new EventEmitter();\n    this.initFlag = false;\n    this.hasChanges = false;\n    this.element = element; // 获取指令所在canvas元素\n  }\n\n  _createClass(NgChartjsDirective, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx\n\n      this.initFlag = true; // 是否初始化了的标志\n\n      if (this.data || this.datasets) {\n        // 判断data和datasets有一个有数据就刷新\n        if (this.noZone) {\n          this.zone.runOutsideAngular(function () {\n            _this.refresh();\n          });\n        } else {\n          this.refresh();\n        }\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      // TODO: 插件变化刷新，开放刷新按钮\n      if (this.initFlag) {\n        // Check if the changes are in the data or datasets\n        if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\n          if (changes.data) {\n            this.updateChartData(changes.data.currentValue);\n          } else {\n            this.updateChartData(changes.datasets.currentValue);\n          }\n\n          this.hasChanges = true;\n        }\n\n        if (changes.hasOwnProperty('labels')) {\n          this.chart.data.labels = changes.labels.currentValue;\n          this.hasChanges = true;\n        }\n\n        if (changes.hasOwnProperty('legend')) {\n          if (changes.legend.currentValue !== changes.legend.previousValue) {\n            this.chart.options.legend.display = changes.legend.currentValue;\n            this.hasChanges = true;\n          }\n        }\n\n        if (changes.hasOwnProperty('adding')) {\n          this.addData_(changes.adding.currentValue.labels, changes.adding.currentValue.data);\n          this.hasChanges = true;\n        }\n\n        if (changes.hasOwnProperty('removing')) {\n          if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {\n            this.removeData_(changes.removing.currentValue.orientation);\n            this.hasChanges = true;\n          }\n        }\n\n        if (changes.hasOwnProperty('chartType')) {\n          this.refresh();\n        }\n\n        if (changes.hasOwnProperty('resetOption')) {\n          Object.assign(this.chart.options, changes.resetOption.currentValue);\n          this.hasChanges = true;\n        }\n\n        if (this.hasChanges) {\n          this.chart.update();\n          this.hasChanges = false;\n        } // change chart id\n\n\n        if (changes.hasOwnProperty('id')) {\n          this.removeChart(changes.id.previousValue);\n          this.addChart(changes.id.currentValue);\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = void 0;\n        this.removeChart(this.id);\n      }\n    } // update chartjs\n\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.chart.update();\n    } // Dynamic add data\n\n  }, {\n    key: \"addData\",\n    value: function addData(labels, data) {\n      this.addData_(labels, data);\n      this.update();\n    } // Dynamic remove data, orientation is 'ildest' or 'latest'\n\n  }, {\n    key: \"removeData\",\n    value: function removeData(orientation) {\n      this.removeData_(orientation);\n      this.update();\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      this.ngOnDestroy();\n      this.chart = this.getChartBuilder(this.ctx\n      /*, data, this.options*/\n      );\n      this.addChart(this.id);\n    }\n  }, {\n    key: \"removeChart\",\n    value: function removeChart(id) {\n      if (this.element.nativeElement.hasAttribute('id')) {\n        this.storeService.removeChart(this.element.nativeElement.id);\n        return;\n      }\n\n      if (id !== null && id !== undefined) {\n        this.storeService.removeChart(id); // delete chart instance.\n      }\n    }\n  }, {\n    key: \"addChart\",\n    value: function addChart(id) {\n      if (this.element.nativeElement.hasAttribute('id')) {\n        this.storeService.addChart(this.element.nativeElement.id, this.chart);\n        return;\n      }\n\n      if (id !== null && id !== undefined) {\n        this.storeService.addChart(id, this.chart);\n      }\n    }\n  }, {\n    key: \"updateChartData\",\n    value: function updateChartData(newDataValues) {\n      if (Array.isArray(newDataValues[0].data)) {\n        this.chart.data.datasets.forEach(function (dataset, i) {\n          dataset.data = newDataValues[i].data;\n\n          if (newDataValues[i].label) {\n            dataset.label = newDataValues[i].label;\n          }\n        });\n      } else {\n        this.chart.data.datasets[0].data = newDataValues;\n      } // update colors\n\n\n      this.chart.data.datasets = this.updateColors(this.chart.data.datasets);\n    }\n  }, {\n    key: \"getChartBuilder\",\n    value: function getChartBuilder(ctx\n    /*, data:Array<any>, options:any*/\n    ) {\n      var _this2 = this;\n\n      var datasets = this.getDatasets();\n      var options = Object.assign({}, this.options); // 深复制options\n\n      if (this.legend === false) {\n        // 设置options的legend TODO: 后续这个属性去除，直接在options内设置\n        options.legend = {\n          display: false\n        };\n      } // hock for onHover and onClick events\n\n\n      options.hover = options.hover || {};\n\n      if (!options.hover.onHover) {\n        options.hover.onHover = function (event, active) {\n          if (active && !active.length) {\n            return;\n          }\n\n          _this2.chartHover.emit({\n            event: event,\n            active: active\n          });\n        };\n      }\n\n      if (!options.onClick) {\n        options.onClick = function (event, active) {\n          _this2.chartClick.emit({\n            event: event,\n            active: active\n          });\n        };\n      }\n\n      var opts = {\n        type: this.chartType,\n        data: {\n          labels: this.labels,\n          datasets: datasets // TODO: 后续更改这个属性名字，否则警告\n\n        },\n        options: options,\n        plugins: this.inlinePlugins\n      };\n      return new Chart(ctx, opts);\n    } // 获取 chart.js的datasets数据\n\n  }, {\n    key: \"getDatasets\",\n    value: function getDatasets() {\n      var _this3 = this;\n\n      var datasets = void 0; // in case if datasets is not provided, but data is present\n\n      if (!this.datasets || !this.datasets.length && this.data && this.data.length) {\n        if (Array.isArray(this.data[0])) {\n          datasets = this.data.map(function (data, index) {\n            return {\n              data: data,\n              label: _this3.labels[index] || \"Label \".concat(index)\n            };\n          });\n        } else {\n          datasets = [{\n            data: this.data,\n            label: \"Label 0\"\n          }];\n        }\n      }\n\n      datasets = this.updateColors(datasets); // update colors\n\n      if (!datasets) {\n        throw new Error(\"ng-chartjs configuration error,\\n      data or datasets field are required to render char \".concat(this.chartType));\n      }\n\n      return datasets;\n    } // update dataset colors\n\n  }, {\n    key: \"updateColors\",\n    value: function updateColors(datasets) {\n      var _this4 = this;\n\n      if (this.datasets && this.datasets.length || datasets && datasets.length) {\n        // fix elm type, pre type is number\n        datasets = (this.datasets || datasets).map(function (elm, index) {\n          var newElm = Object.assign({}, elm);\n\n          if (_this4.colors && _this4.colors.length) {\n            Object.assign(newElm, _this4.colors[index]);\n          } else {\n            Object.assign(newElm, getColors(_this4.chartType, index, newElm.data.length));\n          }\n\n          return newElm;\n        });\n      }\n\n      return datasets;\n    }\n  }, {\n    key: \"addData_\",\n    value: function addData_(labels, data) {\n      var _this5 = this;\n\n      if (labels.length === 0 || data.length === 0) {\n        return;\n      } // update labels\n\n\n      labels.forEach(function (label) {\n        _this5.chart.data.labels.push(label);\n      });\n      this.chart.data.datasets.forEach(function (dataset, index) {\n        if (data[index]) {\n          for (var i = 0; i < data[index].length; i++) {\n            dataset.data.push(data[index][i]);\n          }\n        } else {\n          console.log('The added data does not match the original data');\n          return;\n        }\n      });\n    }\n  }, {\n    key: \"removeData_\",\n    value: function removeData_(orientation) {\n      // fix: support to oldest feature\n      if (orientation === 'latest') {\n        this.chart.data.labels.pop();\n        this.chart.data.datasets.forEach(function (dataset) {\n          dataset.data.pop();\n        });\n      } else if (orientation === 'oldest') {\n        this.chart.data.labels.shift();\n        this.chart.data.datasets.forEach(function (dataset) {\n          dataset.data.shift();\n        });\n      }\n    }\n  }]);\n\n  return NgChartjsDirective;\n}();\n\nNgChartjsDirective.ɵfac = function NgChartjsDirective_Factory(t) {\n  return new (t || NgChartjsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NgChartjsService), ɵngcc0.ɵɵdirectiveInject(StoreService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nNgChartjsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n  type: NgChartjsDirective,\n  selectors: [[\"canvas\", \"ngChartjs\", \"\"]],\n  inputs: {\n    labels: \"labels\",\n    options: \"options\",\n    noZone: \"noZone\",\n    id: \"id\",\n    data: \"data\",\n    datasets: \"datasets\",\n    inlinePlugins: \"inlinePlugins\",\n    chartType: \"chartType\",\n    colors: \"colors\",\n    legend: \"legend\",\n    adding: \"adding\",\n    removing: \"removing\",\n    resetOption: \"resetOption\"\n  },\n  outputs: {\n    chartClick: \"chartClick\",\n    chartHover: \"chartHover\"\n  },\n  exportAs: [\"ngChartjs\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nNgChartjsDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: NgChartjsService\n  }, {\n    type: StoreService\n  }, {\n    type: NgZone\n  }];\n};\n\n__decorate([Input(), __metadata(\"design:type\", Array)], NgChartjsDirective.prototype, \"data\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Array)], NgChartjsDirective.prototype, \"datasets\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Array)], NgChartjsDirective.prototype, \"labels\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], NgChartjsDirective.prototype, \"options\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Array)], NgChartjsDirective.prototype, \"inlinePlugins\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], NgChartjsDirective.prototype, \"chartType\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Array)], NgChartjsDirective.prototype, \"colors\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Boolean)], NgChartjsDirective.prototype, \"legend\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], NgChartjsDirective.prototype, \"adding\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], NgChartjsDirective.prototype, \"removing\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], NgChartjsDirective.prototype, \"resetOption\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", Object)], NgChartjsDirective.prototype, \"noZone\", void 0);\n\n__decorate([Input(), __metadata(\"design:type\", String)], NgChartjsDirective.prototype, \"id\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], NgChartjsDirective.prototype, \"chartClick\", void 0);\n\n__decorate([Output(), __metadata(\"design:type\", EventEmitter)], NgChartjsDirective.prototype, \"chartHover\", void 0);\n\nNgChartjsDirective = __decorate([__metadata(\"design:paramtypes\", [ElementRef, NgChartjsService, StoreService, NgZone])], NgChartjsDirective);\nvar NgChartjsCustomPluginToken = new InjectionToken('[ngx-chart-js] Global Default Plugin');\nvar NgChartjsModule_1;\n\nfunction ngChartjsCustomPluginsFactory(plugins) {\n  var pluginConfig = new PluginConfig();\n  pluginConfig.plugins = plugins;\n  return pluginConfig;\n}\n\nvar NgChartjsModule = NgChartjsModule_1 = /*#__PURE__*/function () {\n  function NgChartjsModule() {\n    _classCallCheck(this, NgChartjsModule);\n  }\n\n  _createClass(NgChartjsModule, null, [{\n    key: \"registerPlugin\",\n    value:\n    /**\n     * Register a plugin.\n     * @param plugin\n     */\n    function registerPlugin() {\n      var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      return {\n        ngModule: NgChartjsModule_1,\n        providers: [{\n          provide: NgChartjsCustomPluginToken,\n          useValue: plugins\n        }, {\n          deps: [NgChartjsCustomPluginToken],\n          provide: PluginConfig,\n          useFactory: ngChartjsCustomPluginsFactory\n        }]\n      };\n    }\n  }]);\n\n  return NgChartjsModule;\n}();\n\nNgChartjsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: NgChartjsModule\n});\nNgChartjsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function NgChartjsModule_Factory(t) {\n    return new (t || NgChartjsModule)();\n  },\n  providers: [NgChartjsService],\n  imports: [[]]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(StoreService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(PluginConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgChartjsService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: StoreService\n    }, {\n      type: PluginConfig\n    }];\n  }, null);\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgChartjsDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'canvas[ngChartjs]',\n      exportAs: 'ngChartjs'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: NgChartjsService\n    }, {\n      type: StoreService\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    labels: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    noZone: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    chartClick: [{\n      type: Output\n    }],\n    chartHover: [{\n      type: Output\n    }],\n    data: [{\n      type: Input\n    }],\n    datasets: [{\n      type: Input\n    }],\n    inlinePlugins: [{\n      type: Input\n    }],\n    chartType: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    adding: [{\n      type: Input\n    }],\n    removing: [{\n      type: Input\n    }],\n    resetOption: [{\n      type: Input\n    }]\n  });\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgChartjsModule, {\n    declarations: [NgChartjsDirective],\n    exports: [NgChartjsDirective]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(NgChartjsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [NgChartjsDirective],\n      exports: [NgChartjsDirective],\n      providers: [NgChartjsService]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ng-chartjs\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DefaultColors, NgChartjsDirective, NgChartjsModule, NgChartjsService, formatBarColor, formatLineColor, formatPieColors, formatPolarAreaColors, generateColor, generateColors, getColors, getRandomColor, getRandomInt, ngChartjsCustomPluginsFactory, rgba, StoreService as ɵa, PluginConfig as ɵb, NgChartjsCustomPluginToken as ɵc };","map":{"version":3,"sources":["ng-chartjs/lib/store.service.ts","ng-chartjs/lib/plugins-config.ts","ng-chartjs/lib/ng-chartjs.service.ts","ng-chartjs/lib/colors.ts","ng-chartjs/lib/ng-chartjs.directive.ts","ng-chartjs/lib/plugin-token.ts","ng-chartjs/lib/ng-chartjs.module.ts","ng-chartjs/public_api.ts","ng-chartjs/ng-chartjs.ts"],"names":["plugins","Chart.plugins"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoreService {\n  private _chartInstances: any[] = [];\n  private _chartId: string[] = [];\n\n  addChart(id: string, chart: any): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return;\n      }\n    }\n    this._chartId.push(id);\n    this._chartInstances.push(chart);\n  }\n\n  removeChart(id: string): void {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        this._chartId.splice(i, 1);\n        this._chartInstances.splice(i, 1);  // delete chart instance.\n      }\n    }\n  }\n\n  getChart(id: string): any {\n    for (let i = 0; i < this._chartId.length; i++) {\n      if (id === this._chartId[i]) {\n        return this._chartInstances[i];\n      }\n    }\n    return null;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class PluginConfig {\n    plugins: any[] = [];\n}\n","import { Injectable } from '@angular/core';\nimport * as Chart from 'chart.js';\nimport { PluginConfig } from './plugins-config';\nimport { StoreService } from './store.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgChartjsService {\n\n    constructor(\n      private storeService: StoreService,\n      private pluginConfig: PluginConfig) {\n      const plugins = pluginConfig.plugins;\n      if (plugins.length !== 0 || plugins) {\n        for (let i = 0; i < plugins.length; i++) {\n          if (plugins[i]) {\n            Chart.plugins.register(plugins[i]);\n          }\n        }\n      }\n    }\n    // get chart instance by id\n    getChart(id: string): any {\n      return this.storeService.getChart(id);\n    }\n}\n","export interface Color {\n    backgroundColor?: string | string[];\n    borderWidth?: number | number[];\n    borderColor?: string | string[];\n    borderCapStyle?: string;\n    borderDash?: number[];\n    borderDashOffset?: number;\n    borderJoinStyle?: string;\n\n    pointBorderColor?: string | string[];\n    pointBackgroundColor?: string | string[];\n    pointBorderWidth?: number | number[];\n\n    pointRadius?: number | number[];\n    pointHoverRadius?: number | number[];\n    pointHitRadius?: number | number[];\n\n    pointHoverBackgroundColor?: string | string[];\n    pointHoverBorderColor?: string | string[];\n    pointHoverBorderWidth?: number | number[];\n    pointStyle?: string | string[];\n\n    hoverBackgroundColor?: string | string[];\n    hoverBorderColor?: string | string[];\n    hoverBorderWidth?: number;\n}\n\n// Default colors\nexport const DefaultColors: number[][] = [\n    [63, 81, 181],       // Indogo\n    [0, 150, 136],       // Teal\n    [255, 152, 0],       // Orange\n    [233, 30, 99],       // Pink\n    [156, 39, 176],      // Purple\n    [0, 188, 212],       // Cyan\n    [3, 169, 244],       // Light Blue\n    [96, 125, 139],      // Blue Grey\n    [255, 193, 7],       // Amber\n    [37, 155, 36],       // Green\n    [205, 220, 57],      // Lime\n    [86, 119, 252]       // Blue\n];\n\n// pie | doughnut\nexport interface Colors extends Color {\n    data?: number[];\n    label?: string;\n}\n\nexport function rgba(colour: number[], alpha: number): string {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nexport function getRandomInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function formatLineColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.35),\n        borderColor: rgba(colors, 1),\n        pointBackgroundColor: rgba(colors, 1),\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: rgba(colors, 0.95)\n    };\n}\n\nexport function formatBarColor(colors: number[]): Color {\n    return {\n        backgroundColor: rgba(colors, 0.75),\n        borderColor: rgba(colors, 1),\n        hoverBackgroundColor: rgba(colors, 1),\n        hoverBorderColor: rgba(colors, 1)\n    };\n}\n\nexport function formatPieColors(colors: number[][]): Colors {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.76)),\n        borderColor: colors.map(() => '#fff'),\n        pointBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointBorderColor: colors.map(() => '#fff'),\n        pointHoverBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        pointHoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nexport function formatPolarAreaColors(colors: number[][]): Color {\n    return {\n        backgroundColor: colors.map((color: number[]) => rgba(color, 0.75)),\n        borderColor: colors.map((color: number[]) => rgba(color, 1)),\n        hoverBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\n        hoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\n    };\n}\n\nexport function getRandomColor(): number[] {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n\n\n/**\n* @method Generate colors for line|bar charts\n* @param index he index of the default color array. eg. 0, 1\n* @return number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function generateColor(index: number): number[] {\n    return DefaultColors[index] || getRandomColor();\n}\n\n\n/**\n* @method Generate colors for pie|doughnut charts\n* @param count Length of data. eg. datasets.data.length\n* @return number[][]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function generateColors(count: number): number[][] {\n    const colorsArr: number[][] = new Array(count);\n    for (let i = 0; i < count; i++) {\n        colorsArr[i] = DefaultColors[i] || getRandomColor();\n    }\n    return colorsArr;\n}\n\n\n/**\n* @method Generate colors by chart type\n* @param chartType The type of chart you are using. eg. line,bar\n* @param index The index of the default color array. eg. DefaultColors[index]\n* @param count Length of data. eg. datasets.data.length\n* @return Color or number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\nexport function getColors(chartType: string, index: number, count: number): Color | number[] {\n    if (chartType === 'pie' ||\n        chartType === 'doughnut' ||\n        chartType === 'bubble' ||\n        chartType === 'scatter') {\n        return formatPieColors(generateColors(count));\n    }\n\n    if (chartType === 'polarArea') {\n        return formatPolarAreaColors(generateColors(count));\n    }\n\n    if (chartType === 'line' || chartType === 'radar') {\n        return formatLineColor(generateColor(index));\n    }\n\n    if (chartType === 'bar' || chartType === 'horizontalBar') {\n        return formatBarColor(generateColor(index));\n    }\n\n    return generateColor(index);\n}\n","import {\n  OnDestroy,\n  OnInit,\n  OnChanges,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Output,\n  SimpleChanges,\n  Directive,\n  NgZone\n} from '@angular/core';\nimport * as Chart from 'chart.js';\nimport { StoreService } from './store.service';\nimport { NgChartjsService } from './ng-chartjs.service';\nimport { getColors, Colors } from './colors';\n\nexport type Labels = Array<string | string[] | number | number[] | Date | Date[] | any | any[]>;\nexport type Orientation = 'oldest' | 'latest';\nexport interface NgChartjsEvent { event: MouseEvent; active: Array<{}>; }\n\n/* tslint:disable-next-line */\n@Directive({ selector: 'canvas[ngChartjs]', exportAs: 'ngChartjs' })\nexport class NgChartjsDirective implements OnDestroy, OnChanges, OnInit {\n\n  // å¾è¡¨çç¹éï¼å®åºè¯¥æ¯æ°ç»<number []>ä»ç¨äºçº¿ï¼æ¡åé·è¾¾ï¼å¦åæ°å­[];\n  @Input() data: number[] | any[];\n  // ç¸å½äºchart.jså data: {datasets: [{...}]}\n  @Input() datasets: Chart.ChartDataSets[];\n  // xè½´æ ç­¾ãè¿å¯¹å¾è¡¨æ¥è¯´æ¯å¿è¦çï¼çº¿ï¼æ¡åé·è¾¾ãå¹¶ä¸åªæ¯å¾è¡¨çæ ç­¾ï¼æ¬åï¼ï¼polarAreaï¼pieådoughnut\n  @Input() labels: Labels = [];\n  // ç¸å½äºchart.jsçoption\n  @Input() options: Chart.ChartOptions = {};\n  // åèæä»¶å±æ§\n  @Input() inlinePlugins: any[];\n  // chartType line, bar, radar, pie, polarArea, doughnut\n  @Input() chartType: Chart.ChartType;\n  // æ°æ®é¢è²ï¼å¦ææ²¡ææå®ï¼å°ä½¿ç¨é»è®¤å|æéæºé¢è²\n  @Input() colors: Colors[];\n  // æ¯å¦æ¾ç¤ºå¾ä¾\n  @Input() legend: boolean;\n\n  @Input() adding: { labels: Labels[], data: any[][] };\n  @Input() removing: { orientation: Orientation };  // orientation is 'oldest' or 'latest\n  @Input() resetOption: Chart.ChartType;\n\n  @Input() noZone = true; // disable angular NgZone\n  @Input() id: string = null; // chart instance id\n\n  // é¼ æ ç¹å»å¾è¡¨ææçåºå\n  @Output() chartClick: EventEmitter<NgChartjsEvent> = new EventEmitter();\n  // é¼ æ æ¬æµ®å¨æ ç­¾æèæ´»è·çç¹ä¸é¢æ¶\n  @Output() chartHover: EventEmitter<NgChartjsEvent> = new EventEmitter();\n\n  // get Chartjs object\n  chart: Chart;\n  private ctx: CanvasRenderingContext2D;\n  private initFlag = false;\n  private hasChanges = false;\n\n  private element: ElementRef;\n\n  public constructor(\n    element: ElementRef,\n    private ngChartjsService: NgChartjsService,\n    private storeService: StoreService,\n    private zone: NgZone) {\n    this.element = element;   // è·åæä»¤æå¨canvasåç´ \n  }\n\n  ngOnInit(): void {\n    this.ctx = this.element.nativeElement.getContext('2d'); // è·ååç´ çctx\n    this.initFlag = true; // æ¯å¦åå§åäºçæ å¿\n\n    if (this.data || this.datasets) { // å¤æ­dataådatasetsæä¸ä¸ªææ°æ®å°±å·æ°\n      if (this.noZone) {\n        this.zone.runOutsideAngular(() => {\n         this.refresh();\n        });\n      } else {\n        this.refresh();\n      }\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // TODO: æä»¶ååå·æ°ï¼å¼æ¾å·æ°æé®\n    if (this.initFlag) {\n      // Check if the changes are in the data or datasets\n      if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\n        if (changes.data) {\n          this.updateChartData(changes.data.currentValue);\n        } else {\n          this.updateChartData(changes.datasets.currentValue);\n        }\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('labels')) {\n        this.chart.data.labels = changes.labels.currentValue;\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('legend')) {\n        if (changes.legend.currentValue !== changes.legend.previousValue) {\n          this.chart.options.legend.display = changes.legend.currentValue;\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('adding')) {\n        this.addData_(changes.adding.currentValue.labels, changes.adding.currentValue.data);\n        this.hasChanges = true;\n      }\n\n      if (changes.hasOwnProperty('removing')) {\n        if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {\n          this.removeData_(changes.removing.currentValue.orientation);\n          this.hasChanges = true;\n        }\n      }\n\n      if (changes.hasOwnProperty('chartType')) {\n        this.refresh();\n      }\n\n      if (changes.hasOwnProperty('resetOption')) {\n        Object.assign(this.chart.options, changes.resetOption.currentValue);\n        this.hasChanges = true;\n      }\n\n      if (this.hasChanges) {\n        this.chart.update();\n        this.hasChanges = false;\n      }\n\n      // change chart id\n      if (changes.hasOwnProperty('id')) {\n        this.removeChart(changes.id.previousValue);\n        this.addChart(changes.id.currentValue);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = void 0;\n\n      this.removeChart(this.id);\n    }\n  }\n\n  // update chartjs\n  update(): void {\n    this.chart.update();\n  }\n\n  // Dynamic add data\n  addData(labels: Labels[], data: any[][]): void {\n    this.addData_(labels, data);\n    this.update();\n  }\n  // Dynamic remove data, orientation is 'ildest' or 'latest'\n  removeData(orientation: Orientation): void {\n    this.removeData_(orientation);\n    this.update();\n  }\n\n  private refresh(): void {\n    this.ngOnDestroy();\n    this.chart = this.getChartBuilder(this.ctx/*, data, this.options*/);\n    this.addChart(this.id);\n  }\n\n  private removeChart(id: string): void {\n    if (this.element.nativeElement.hasAttribute('id')) {\n      this.storeService.removeChart(this.element.nativeElement.id);\n      return;\n    }\n    if (id !== null && id !== undefined) {\n      this.storeService.removeChart(id);  // delete chart instance.\n    }\n  }\n\n  private addChart(id: string): void {\n    if (this.element.nativeElement.hasAttribute('id')) {\n      this.storeService.addChart(this.element.nativeElement.id, this.chart);\n      return;\n    }\n    if (id !== null && id !== undefined) {\n      this.storeService.addChart(id, this.chart);\n    }\n  }\n\n  private updateChartData(newDataValues: number[] | any[]): void {\n    if (Array.isArray(newDataValues[0].data)) {\n      this.chart.data.datasets.forEach((dataset: Chart.ChartDataSets, i: number) => {\n        dataset.data = newDataValues[i].data;\n\n        if (newDataValues[i].label) {\n          dataset.label = newDataValues[i].label;\n        }\n      });\n    } else {\n      this.chart.data.datasets[0].data = newDataValues;\n    }\n    // update colors\n    this.chart.data.datasets = this.updateColors(this.chart.data.datasets);\n  }\n\n  private getChartBuilder(ctx: CanvasRenderingContext2D/*, data:Array<any>, options:any*/): Chart {\n    const datasets = this.getDatasets();\n\n    const options: Chart.ChartOptions = Object.assign({}, this.options); // æ·±å¤å¶options\n    if (this.legend === false) {  // è®¾ç½®optionsçlegend TODO: åç»­è¿ä¸ªå±æ§å»é¤ï¼ç´æ¥å¨optionsåè®¾ç½®\n      options.legend = { display: false };\n    }\n    // hock for onHover and onClick events\n    options.hover = options.hover || {};\n    if (!options.hover.onHover) {\n      options.hover.onHover = (event: MouseEvent, active: Array<{}>) => {\n        if (active && !active.length) {\n          return;\n        }\n        this.chartHover.emit({ event, active });\n      };\n    }\n\n    if (!options.onClick) {\n      options.onClick = (event: MouseEvent, active: Array<{}>) => {\n        this.chartClick.emit({ event, active });\n      };\n    }\n\n    const opts = {\n      type: this.chartType,\n      data: {\n        labels: this.labels,\n        datasets: datasets   // TODO: åç»­æ´æ¹è¿ä¸ªå±æ§åå­ï¼å¦åè­¦å\n      },\n      options: options,   // TODO: åç»­æ´æ¹è¿ä¸ªå±æ§åå­ï¼å¦åè­¦å\n      plugins: this.inlinePlugins\n    };\n\n    return new Chart(ctx, opts);\n  }\n\n  // è·å chart.jsçdatasetsæ°æ®\n  private getDatasets(): Chart.ChartDataSets[] {\n    let datasets: Chart.ChartDataSets[] = void 0;\n    // in case if datasets is not provided, but data is present\n    if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\n      if (Array.isArray(this.data[0])) {\n        datasets = (this.data as number[][]).map((data: number[], index: number) => {\n          return { data, label: this.labels[index] || `Label ${index}` };\n        });\n      } else {\n        datasets = [{ data: this.data, label: `Label 0` }];\n      }\n    }\n\n    datasets = this.updateColors(datasets); // update colors\n\n    if (!datasets) {\n      throw new Error(`ng-chartjs configuration error,\n      data or datasets field are required to render char ${this.chartType}`);\n    }\n\n    return datasets;\n  }\n\n  // update dataset colors\n  private updateColors(datasets: Chart.ChartDataSets[]): Chart.ChartDataSets[] {\n    if (this.datasets && this.datasets.length || (datasets && datasets.length)) {\n      // fix elm type, pre type is number\n      datasets = (this.datasets || datasets).map((elm: Chart.ChartDataSets, index: number) => {\n        const newElm: Chart.ChartDataSets = Object.assign({}, elm);\n        if (this.colors && this.colors.length) {\n          Object.assign(newElm, this.colors[index]);\n        } else {\n          Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));\n        }\n        return newElm;\n      });\n    }\n    return datasets;\n  }\n\n  private addData_(labels: Labels[], data: any[][]): void {\n    if (labels.length === 0 || data.length === 0) {\n      return;\n    }\n    // update labels\n    labels.forEach((label) => { this.chart.data.labels.push(label); });\n\n    this.chart.data.datasets.forEach((dataset, index) => {\n      if (data[index]) {\n        for (let i = 0; i < data[index].length; i++) {\n          dataset.data.push(data[index][i]);\n        }\n      } else {\n        console.log('The added data does not match the original data');\n        return;\n      }\n    });\n  }\n\n  private removeData_(orientation: Orientation): void {\n    // fix: support to oldest feature\n    if (orientation === 'latest') {\n      this.chart.data.labels.pop();\n      this.chart.data.datasets.forEach((dataset: Chart.ChartDataSets) => {\n        dataset.data.pop();\n      });\n    } else if (orientation === 'oldest') {\n      this.chart.data.labels.shift();\n      this.chart.data.datasets.forEach((dataset: Chart.ChartDataSets) => {\n        dataset.data.shift();\n      });\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const NgChartjsCustomPluginToken: InjectionToken<any> = new InjectionToken<any[]>('[ngx-chart-js] Global Default Plugin');\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf } from '@angular/core';\nimport { NgChartjsDirective } from './ng-chartjs.directive';\nimport { NgChartjsCustomPluginToken } from './plugin-token';\nimport { PluginConfig } from './plugins-config';\nimport { NgChartjsService } from './ng-chartjs.service';\n\nexport function ngChartjsCustomPluginsFactory(plugins: any[]): PluginConfig {\n  const pluginConfig = new PluginConfig();\n  pluginConfig.plugins = plugins;\n  return pluginConfig;\n}\n\n@NgModule({\n  imports: [],\n  declarations: [NgChartjsDirective],\n  exports: [NgChartjsDirective],\n  providers: [NgChartjsService]\n})\nexport class NgChartjsModule {\n  /**\n   * Register a plugin.\n   * @param plugin\n   */\n  public static registerPlugin(plugins: any[] = []): ModuleWithProviders<NgChartjsModule> {\n    return {\n      ngModule: NgChartjsModule,\n      providers: [\n        {\n          provide: NgChartjsCustomPluginToken,\n          useValue: plugins\n        },\n        {\n          deps: [NgChartjsCustomPluginToken],\n          provide:  PluginConfig,\n          useFactory: ngChartjsCustomPluginsFactory\n        }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ng-chartjs\n */\nexport * from './lib/ng-chartjs.directive';\nexport * from './lib/ng-chartjs.module';\nexport * from './lib/ng-chartjs.service';\nexport * from './lib/colors';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {NgChartjsCustomPluginToken as Éµc} from './lib/plugin-token';\nexport {PluginConfig as Éµb} from './lib/plugins-config';\nexport {StoreService as Éµa} from './lib/store.service';"]},"metadata":{},"sourceType":"module"}