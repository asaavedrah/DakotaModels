{"ast":null,"code":"import _classCallCheck from \"C:/Users/DTI_UCH/Desktop/template_angularjs10/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/DTI_UCH/Desktop/template_angularjs10/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate, __metadata } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, ɵɵinject, EventEmitter, ElementRef, NgZone, Input, Output, Directive, InjectionToken, NgModule } from '@angular/core';\nimport * as Chart from 'chart.js';\nimport { plugins } from 'chart.js';\nimport * as ɵngcc0 from '@angular/core';\n\nvar StoreService = /*@__PURE__*/function () {\n  var StoreService = /*#__PURE__*/function () {\n    function StoreService() {\n      _classCallCheck(this, StoreService);\n\n      this._chartInstances = [];\n      this._chartId = [];\n    }\n\n    _createClass(StoreService, [{\n      key: \"addChart\",\n      value: function addChart(id, chart) {\n        for (var i = 0; i < this._chartId.length; i++) {\n          if (id === this._chartId[i]) {\n            return;\n          }\n        }\n\n        this._chartId.push(id);\n\n        this._chartInstances.push(chart);\n      }\n    }, {\n      key: \"removeChart\",\n      value: function removeChart(id) {\n        for (var i = 0; i < this._chartId.length; i++) {\n          if (id === this._chartId[i]) {\n            this._chartId.splice(i, 1);\n\n            this._chartInstances.splice(i, 1); // delete chart instance.\n\n          }\n        }\n      }\n    }, {\n      key: \"getChart\",\n      value: function getChart(id) {\n        for (var i = 0; i < this._chartId.length; i++) {\n          if (id === this._chartId[i]) {\n            return this._chartInstances[i];\n          }\n        }\n\n        return null;\n      }\n    }]);\n\n    return StoreService;\n  }();\n\n  StoreService.ɵfac = function StoreService_Factory(t) {\n    return new (t || StoreService)();\n  };\n\n  StoreService.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function StoreService_Factory() {\n      return new StoreService();\n    },\n    token: StoreService,\n    providedIn: \"root\"\n  });\n  return StoreService;\n}();\n\nvar PluginConfig = /*@__PURE__*/function () {\n  var PluginConfig = function PluginConfig() {\n    _classCallCheck(this, PluginConfig);\n\n    this.plugins = [];\n  };\n\n  PluginConfig.ɵfac = function PluginConfig_Factory(t) {\n    return new (t || PluginConfig)();\n  };\n\n  PluginConfig.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function PluginConfig_Factory() {\n      return new PluginConfig();\n    },\n    token: PluginConfig,\n    providedIn: \"root\"\n  });\n  return PluginConfig;\n}();\n\nvar NgChartjsService = /*@__PURE__*/function () {\n  var NgChartjsService = /*#__PURE__*/function () {\n    function NgChartjsService(storeService, pluginConfig) {\n      _classCallCheck(this, NgChartjsService);\n\n      this.storeService = storeService;\n      this.pluginConfig = pluginConfig;\n      var plugins$1 = pluginConfig.plugins;\n\n      if (plugins$1.length !== 0 || plugins$1) {\n        for (var i = 0; i < plugins$1.length; i++) {\n          if (plugins$1[i]) {\n            plugins.register(plugins$1[i]);\n          }\n        }\n      }\n    } // get chart instance by id\n\n\n    _createClass(NgChartjsService, [{\n      key: \"getChart\",\n      value: function getChart(id) {\n        return this.storeService.getChart(id);\n      }\n    }]);\n\n    return NgChartjsService;\n  }();\n\n  NgChartjsService.ɵfac = function NgChartjsService_Factory(t) {\n    return new (t || NgChartjsService)(ɵngcc0.ɵɵinject(StoreService), ɵngcc0.ɵɵinject(PluginConfig));\n  };\n\n  NgChartjsService.ɵprov = /*@__PURE__*/ɵɵdefineInjectable({\n    factory: function NgChartjsService_Factory() {\n      return new NgChartjsService(ɵɵinject(StoreService), ɵɵinject(PluginConfig));\n    },\n    token: NgChartjsService,\n    providedIn: \"root\"\n  });\n  return NgChartjsService;\n}(); // Default colors\n\n\nvar DefaultColors = [[63, 81, 181], [0, 150, 136], [255, 152, 0], [233, 30, 99], [156, 39, 176], [0, 188, 212], [3, 169, 244], [96, 125, 139], [255, 193, 7], [37, 155, 36], [205, 220, 57], [86, 119, 252] // Blue\n];\n\nfunction rgba(colour, alpha) {\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction formatLineColor(colors) {\n  return {\n    backgroundColor: rgba(colors, 0.35),\n    borderColor: rgba(colors, 1),\n    pointBackgroundColor: rgba(colors, 1),\n    pointBorderColor: '#fff',\n    pointHoverBackgroundColor: '#fff',\n    pointHoverBorderColor: rgba(colors, 0.95)\n  };\n}\n\nfunction formatBarColor(colors) {\n  return {\n    backgroundColor: rgba(colors, 0.75),\n    borderColor: rgba(colors, 1),\n    hoverBackgroundColor: rgba(colors, 1),\n    hoverBorderColor: rgba(colors, 1)\n  };\n}\n\nfunction formatPieColors(colors) {\n  return {\n    backgroundColor: colors.map(function (color) {\n      return rgba(color, 0.76);\n    }),\n    borderColor: colors.map(function () {\n      return '#fff';\n    }),\n    pointBackgroundColor: colors.map(function (color) {\n      return rgba(color, 1);\n    }),\n    pointBorderColor: colors.map(function () {\n      return '#fff';\n    }),\n    pointHoverBackgroundColor: colors.map(function (color) {\n      return rgba(color, 1);\n    }),\n    pointHoverBorderColor: colors.map(function (color) {\n      return rgba(color, 1);\n    })\n  };\n}\n\nfunction formatPolarAreaColors(colors) {\n  return {\n    backgroundColor: colors.map(function (color) {\n      return rgba(color, 0.75);\n    }),\n    borderColor: colors.map(function (color) {\n      return rgba(color, 1);\n    }),\n    hoverBackgroundColor: colors.map(function (color) {\n      return rgba(color, 1);\n    }),\n    hoverBorderColor: colors.map(function (color) {\n      return rgba(color, 1);\n    })\n  };\n}\n\nfunction getRandomColor() {\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n* @method Generate colors for line|bar charts\n* @param index he index of the default color array. eg. 0, 1\n* @return number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\n\n\nfunction generateColor(index) {\n  return DefaultColors[index] || getRandomColor();\n}\n/**\n* @method Generate colors for pie|doughnut charts\n* @param count Length of data. eg. datasets.data.length\n* @return number[][]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\n\n\nfunction generateColors(count) {\n  var colorsArr = new Array(count);\n\n  for (var i = 0; i < count; i++) {\n    colorsArr[i] = DefaultColors[i] || getRandomColor();\n  }\n\n  return colorsArr;\n}\n/**\n* @method Generate colors by chart type\n* @param chartType The type of chart you are using. eg. line,bar\n* @param index The index of the default color array. eg. DefaultColors[index]\n* @param count Length of data. eg. datasets.data.length\n* @return Color or number[]\n* @author vincent 2019-01-22\n* @version 0.0.0\n* @example\n* @log 1. vincent,2019-01-22,done\n*/\n\n\nfunction getColors(chartType, index, count) {\n  if (chartType === 'pie' || chartType === 'doughnut' || chartType === 'bubble' || chartType === 'scatter') {\n    return formatPieColors(generateColors(count));\n  }\n\n  if (chartType === 'polarArea') {\n    return formatPolarAreaColors(generateColors(count));\n  }\n\n  if (chartType === 'line' || chartType === 'radar') {\n    return formatLineColor(generateColor(index));\n  }\n\n  if (chartType === 'bar' || chartType === 'horizontalBar') {\n    return formatBarColor(generateColor(index));\n  }\n\n  return generateColor(index);\n}\n\nvar NgChartjsDirective = /*@__PURE__*/function () {\n  /* tslint:disable-next-line */\n  var NgChartjsDirective = /*#__PURE__*/function () {\n    function NgChartjsDirective(element, ngChartjsService, storeService, zone) {\n      _classCallCheck(this, NgChartjsDirective);\n\n      this.ngChartjsService = ngChartjsService;\n      this.storeService = storeService;\n      this.zone = zone; // x轴标签。这对图表来说是必要的：线，条和雷达。并且只是图表的标签（悬停）：polarArea，pie和doughnut\n\n      this.labels = []; // 相当于chart.js的option\n\n      this.options = {};\n      this.noZone = true; // disable angular NgZone\n\n      this.id = null; // chart instance id\n      // 鼠标点击图表所有的区域\n\n      this.chartClick = new EventEmitter(); // 鼠标悬浮在标签或者活跃的点上面时\n\n      this.chartHover = new EventEmitter();\n      this.initFlag = false;\n      this.hasChanges = false;\n      this.element = element; // 获取指令所在canvas元素\n    }\n\n    _createClass(NgChartjsDirective, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this = this;\n\n        this.ctx = this.element.nativeElement.getContext('2d'); // 获取元素的ctx\n\n        this.initFlag = true; // 是否初始化了的标志\n\n        if (this.data || this.datasets) {\n          // 判断data和datasets有一个有数据就刷新\n          if (this.noZone) {\n            this.zone.runOutsideAngular(function () {\n              _this.refresh();\n            });\n          } else {\n            this.refresh();\n          }\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        // TODO: 插件变化刷新，开放刷新按钮\n        if (this.initFlag) {\n          // Check if the changes are in the data or datasets\n          if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\n            if (changes.data) {\n              this.updateChartData(changes.data.currentValue);\n            } else {\n              this.updateChartData(changes.datasets.currentValue);\n            }\n\n            this.hasChanges = true;\n          }\n\n          if (changes.hasOwnProperty('labels')) {\n            this.chart.data.labels = changes.labels.currentValue;\n            this.hasChanges = true;\n          }\n\n          if (changes.hasOwnProperty('legend')) {\n            if (changes.legend.currentValue !== changes.legend.previousValue) {\n              this.chart.options.legend.display = changes.legend.currentValue;\n              this.hasChanges = true;\n            }\n          }\n\n          if (changes.hasOwnProperty('adding')) {\n            this.addData_(changes.adding.currentValue.labels, changes.adding.currentValue.data);\n            this.hasChanges = true;\n          }\n\n          if (changes.hasOwnProperty('removing')) {\n            if (changes.removing.currentValue.orientation === 'oldest' || changes.removing.currentValue.orientation === 'latest') {\n              this.removeData_(changes.removing.currentValue.orientation);\n              this.hasChanges = true;\n            }\n          }\n\n          if (changes.hasOwnProperty('chartType')) {\n            this.refresh();\n          }\n\n          if (changes.hasOwnProperty('resetOption')) {\n            Object.assign(this.chart.options, changes.resetOption.currentValue);\n            this.hasChanges = true;\n          }\n\n          if (this.hasChanges) {\n            this.chart.update();\n            this.hasChanges = false;\n          } // change chart id\n\n\n          if (changes.hasOwnProperty('id')) {\n            this.removeChart(changes.id.previousValue);\n            this.addChart(changes.id.currentValue);\n          }\n        }\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.chart) {\n          this.chart.destroy();\n          this.chart = void 0;\n          this.removeChart(this.id);\n        }\n      } // update chartjs\n\n    }, {\n      key: \"update\",\n      value: function update() {\n        this.chart.update();\n      } // Dynamic add data\n\n    }, {\n      key: \"addData\",\n      value: function addData(labels, data) {\n        this.addData_(labels, data);\n        this.update();\n      } // Dynamic remove data, orientation is 'ildest' or 'latest'\n\n    }, {\n      key: \"removeData\",\n      value: function removeData(orientation) {\n        this.removeData_(orientation);\n        this.update();\n      }\n    }, {\n      key: \"refresh\",\n      value: function refresh() {\n        this.ngOnDestroy();\n        this.chart = this.getChartBuilder(this.ctx\n        /*, data, this.options*/\n        );\n        this.addChart(this.id);\n      }\n    }, {\n      key: \"removeChart\",\n      value: function removeChart(id) {\n        if (this.element.nativeElement.hasAttribute('id')) {\n          this.storeService.removeChart(this.element.nativeElement.id);\n          return;\n        }\n\n        if (id !== null && id !== undefined) {\n          this.storeService.removeChart(id); // delete chart instance.\n        }\n      }\n    }, {\n      key: \"addChart\",\n      value: function addChart(id) {\n        if (this.element.nativeElement.hasAttribute('id')) {\n          this.storeService.addChart(this.element.nativeElement.id, this.chart);\n          return;\n        }\n\n        if (id !== null && id !== undefined) {\n          this.storeService.addChart(id, this.chart);\n        }\n      }\n    }, {\n      key: \"updateChartData\",\n      value: function updateChartData(newDataValues) {\n        if (Array.isArray(newDataValues[0].data)) {\n          this.chart.data.datasets.forEach(function (dataset, i) {\n            dataset.data = newDataValues[i].data;\n\n            if (newDataValues[i].label) {\n              dataset.label = newDataValues[i].label;\n            }\n          });\n        } else {\n          this.chart.data.datasets[0].data = newDataValues;\n        } // update colors\n\n\n        this.chart.data.datasets = this.updateColors(this.chart.data.datasets);\n      }\n    }, {\n      key: \"getChartBuilder\",\n      value: function getChartBuilder(ctx\n      /*, data:Array<any>, options:any*/\n      ) {\n        var _this2 = this;\n\n        var datasets = this.getDatasets();\n        var options = Object.assign({}, this.options); // 深复制options\n\n        if (this.legend === false) {\n          // 设置options的legend TODO: 后续这个属性去除，直接在options内设置\n          options.legend = {\n            display: false\n          };\n        } // hock for onHover and onClick events\n\n\n        options.hover = options.hover || {};\n\n        if (!options.hover.onHover) {\n          options.hover.onHover = function (event, active) {\n            if (active && !active.length) {\n              return;\n            }\n\n            _this2.chartHover.emit({\n              event: event,\n              active: active\n            });\n          };\n        }\n\n        if (!options.onClick) {\n          options.onClick = function (event, active) {\n            _this2.chartClick.emit({\n              event: event,\n              active: active\n            });\n          };\n        }\n\n        var opts = {\n          type: this.chartType,\n          data: {\n            labels: this.labels,\n            datasets: datasets // TODO: 后续更改这个属性名字，否则警告\n\n          },\n          options: options,\n          plugins: this.inlinePlugins\n        };\n        return new Chart(ctx, opts);\n      } // 获取 chart.js的datasets数据\n\n    }, {\n      key: \"getDatasets\",\n      value: function getDatasets() {\n        var _this3 = this;\n\n        var datasets = void 0; // in case if datasets is not provided, but data is present\n\n        if (!this.datasets || !this.datasets.length && this.data && this.data.length) {\n          if (Array.isArray(this.data[0])) {\n            datasets = this.data.map(function (data, index) {\n              return {\n                data: data,\n                label: _this3.labels[index] || \"Label \".concat(index)\n              };\n            });\n          } else {\n            datasets = [{\n              data: this.data,\n              label: \"Label 0\"\n            }];\n          }\n        }\n\n        datasets = this.updateColors(datasets); // update colors\n\n        if (!datasets) {\n          throw new Error(\"ng-chartjs configuration error,\\n      data or datasets field are required to render char \".concat(this.chartType));\n        }\n\n        return datasets;\n      } // update dataset colors\n\n    }, {\n      key: \"updateColors\",\n      value: function updateColors(datasets) {\n        var _this4 = this;\n\n        if (this.datasets && this.datasets.length || datasets && datasets.length) {\n          // fix elm type, pre type is number\n          datasets = (this.datasets || datasets).map(function (elm, index) {\n            var newElm = Object.assign({}, elm);\n\n            if (_this4.colors && _this4.colors.length) {\n              Object.assign(newElm, _this4.colors[index]);\n            } else {\n              Object.assign(newElm, getColors(_this4.chartType, index, newElm.data.length));\n            }\n\n            return newElm;\n          });\n        }\n\n        return datasets;\n      }\n    }, {\n      key: \"addData_\",\n      value: function addData_(labels, data) {\n        var _this5 = this;\n\n        if (labels.length === 0 || data.length === 0) {\n          return;\n        } // update labels\n\n\n        labels.forEach(function (label) {\n          _this5.chart.data.labels.push(label);\n        });\n        this.chart.data.datasets.forEach(function (dataset, index) {\n          if (data[index]) {\n            for (var i = 0; i < data[index].length; i++) {\n              dataset.data.push(data[index][i]);\n            }\n          } else {\n            console.log('The added data does not match the original data');\n            return;\n          }\n        });\n      }\n    }, {\n      key: \"removeData_\",\n      value: function removeData_(orientation) {\n        // fix: support to oldest feature\n        if (orientation === 'latest') {\n          this.chart.data.labels.pop();\n          this.chart.data.datasets.forEach(function (dataset) {\n            dataset.data.pop();\n          });\n        } else if (orientation === 'oldest') {\n          this.chart.data.labels.shift();\n          this.chart.data.datasets.forEach(function (dataset) {\n            dataset.data.shift();\n          });\n        }\n      }\n    }]);\n\n    return NgChartjsDirective;\n  }();\n\n  NgChartjsDirective.ɵfac = function NgChartjsDirective_Factory(t) {\n    return new (t || NgChartjsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NgChartjsService), ɵngcc0.ɵɵdirectiveInject(StoreService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  NgChartjsDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgChartjsDirective,\n    selectors: [[\"canvas\", \"ngChartjs\", \"\"]],\n    inputs: {\n      labels: \"labels\",\n      options: \"options\",\n      noZone: \"noZone\",\n      id: \"id\",\n      data: \"data\",\n      datasets: \"datasets\",\n      inlinePlugins: \"inlinePlugins\",\n      chartType: \"chartType\",\n      colors: \"colors\",\n      legend: \"legend\",\n      adding: \"adding\",\n      removing: \"removing\",\n      resetOption: \"resetOption\"\n    },\n    outputs: {\n      chartClick: \"chartClick\",\n      chartHover: \"chartHover\"\n    },\n    exportAs: [\"ngChartjs\"],\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return NgChartjsDirective;\n}();\n\nvar NgChartjsCustomPluginToken = /*@__PURE__*/new InjectionToken('[ngx-chart-js] Global Default Plugin');\nvar NgChartjsModule_1;\n\nfunction ngChartjsCustomPluginsFactory(plugins) {\n  var pluginConfig = new PluginConfig();\n  pluginConfig.plugins = plugins;\n  return pluginConfig;\n}\n\nvar NgChartjsModule = /*@__PURE__*/function () {\n  var NgChartjsModule = NgChartjsModule_1 = /*#__PURE__*/function () {\n    function NgChartjsModule() {\n      _classCallCheck(this, NgChartjsModule);\n    }\n\n    _createClass(NgChartjsModule, null, [{\n      key: \"registerPlugin\",\n      value:\n      /**\n       * Register a plugin.\n       * @param plugin\n       */\n      function registerPlugin() {\n        var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        return {\n          ngModule: NgChartjsModule_1,\n          providers: [{\n            provide: NgChartjsCustomPluginToken,\n            useValue: plugins\n          }, {\n            deps: [NgChartjsCustomPluginToken],\n            provide: PluginConfig,\n            useFactory: ngChartjsCustomPluginsFactory\n          }]\n        };\n      }\n    }]);\n\n    return NgChartjsModule;\n  }();\n\n  NgChartjsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgChartjsModule\n  });\n  NgChartjsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function NgChartjsModule_Factory(t) {\n      return new (t || NgChartjsModule)();\n    },\n    providers: [NgChartjsService],\n    imports: [[]]\n  });\n  return NgChartjsModule;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgChartjsModule, {\n    declarations: [NgChartjsDirective],\n    exports: [NgChartjsDirective]\n  });\n})();\n/*\n * Public API Surface of ng-chartjs\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { DefaultColors, NgChartjsDirective, NgChartjsModule, NgChartjsService, formatBarColor, formatLineColor, formatPieColors, formatPolarAreaColors, generateColor, generateColors, getColors, getRandomColor, getRandomInt, ngChartjsCustomPluginsFactory, rgba, StoreService as ɵa, PluginConfig as ɵb, NgChartjsCustomPluginToken as ɵc };","map":null,"metadata":{},"sourceType":"module"}