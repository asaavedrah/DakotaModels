import { Directive, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NgModel, FormsModule } from '@angular/forms';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
class HighlightJsDirective {
    constructor(el, ngModel, doc) {
        this.el = el;
        this.ngModel = ngModel;
        this.doc = doc;
        this.lang = 'html';
    }
    escapeHTML(str) {
        return (str || '')
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;');
    }
    init() {
        this.destroy();
        this.codeEl = this.doc.createElement('pre');
        if (this.lang) {
            this.codeEl.className = this.lang;
        }
        this.codeEl.innerHTML =
            this.code || '' + this.el.nativeElement.innerHTML.trim();
        this.parentEl = this.el.nativeElement.parentNode;
        this.parentEl.insertBefore(this.codeEl, this.el.nativeElement.nextSibling);
        hljs.configure(Object.assign({}, this.options));
        hljs.highlightBlock(this.codeEl);
    }
    destroy() {
        if (this.codeEl) {
            this.parentEl.removeChild(this.codeEl);
            this.codeEl = null;
        }
    }
    ngOnInit() {
        this.init();
    }
    ngAfterViewInit() {
        if (this.ngModel) {
            this.modelValue$ = this.ngModel.valueChanges.subscribe((res) => {
                this.code = this.escapeHTML(res);
                this.init();
            });
        }
        else {
            this.initMutation();
        }
    }
    ngOnDestroy() {
        this.destroy();
        this.destroyMutation();
        if (this.modelValue$) {
            this.modelValue$.unsubscribe();
        }
    }
    initMutation() {
        if (typeof MutationObserver === 'undefined') {
            return;
        }
        this.observer = new MutationObserver(this.init.bind(this));
        this.observer.observe(this.el.nativeElement, {
            characterData: true,
            childList: true,
            subtree: true,
        });
    }
    destroyMutation() {
        if (!this.observer) {
            return;
        }
        this.observer.disconnect();
    }
}
HighlightJsDirective.ɵfac = function HighlightJsDirective_Factory(t) { return new (t || HighlightJsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgModel, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
HighlightJsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HighlightJsDirective, selectors: [["", "highlight-js", ""]], hostAttrs: [2, "display", "none"], inputs: { lang: "lang", code: "code", options: "options" }, exportAs: ["highlightJs"] });
HighlightJsDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgModel, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
HighlightJsDirective.propDecorators = {
    options: [{ type: Input }],
    lang: [{ type: Input }],
    code: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightJsDirective, [{
        type: Directive,
        args: [{
                selector: '[highlight-js]',
                host: {
                    style: 'display:none;'
                },
                exportAs: 'highlightJs'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.NgModel, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { lang: [{
            type: Input
        }], code: [{
            type: Input
        }], options: [{
            type: Input
        }] }); })();

class HighlightJsModule {
}
HighlightJsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HighlightJsModule });
HighlightJsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HighlightJsModule_Factory(t) { return new (t || HighlightJsModule)(); }, imports: [[FormsModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HighlightJsModule, { declarations: function () { return [HighlightJsDirective]; }, imports: function () { return [FormsModule]; }, exports: function () { return [HighlightJsDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightJsModule, [{
        type: NgModule,
        args: [{
                imports: [FormsModule],
                declarations: [HighlightJsDirective],
                exports: [HighlightJsDirective]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { HighlightJsDirective, HighlightJsModule };

//# sourceMappingURL=ngx-highlight-js.js.map