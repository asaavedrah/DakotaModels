import { Directive, ElementRef, Input, Inject, Optional, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NgModel } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
export class HighlightJsDirective {
    constructor(el, ngModel, doc) {
        this.el = el;
        this.ngModel = ngModel;
        this.doc = doc;
        this.lang = 'html';
    }
    escapeHTML(str) {
        return (str || '')
            .replace(/&/g, '&amp;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;');
    }
    init() {
        this.destroy();
        this.codeEl = this.doc.createElement('pre');
        if (this.lang) {
            this.codeEl.className = this.lang;
        }
        this.codeEl.innerHTML =
            this.code || '' + this.el.nativeElement.innerHTML.trim();
        this.parentEl = this.el.nativeElement.parentNode;
        this.parentEl.insertBefore(this.codeEl, this.el.nativeElement.nextSibling);
        hljs.configure(Object.assign({}, this.options));
        hljs.highlightBlock(this.codeEl);
    }
    destroy() {
        if (this.codeEl) {
            this.parentEl.removeChild(this.codeEl);
            this.codeEl = null;
        }
    }
    ngOnInit() {
        this.init();
    }
    ngAfterViewInit() {
        if (this.ngModel) {
            this.modelValue$ = this.ngModel.valueChanges.subscribe((res) => {
                this.code = this.escapeHTML(res);
                this.init();
            });
        }
        else {
            this.initMutation();
        }
    }
    ngOnDestroy() {
        this.destroy();
        this.destroyMutation();
        if (this.modelValue$) {
            this.modelValue$.unsubscribe();
        }
    }
    initMutation() {
        if (typeof MutationObserver === 'undefined') {
            return;
        }
        this.observer = new MutationObserver(this.init.bind(this));
        this.observer.observe(this.el.nativeElement, {
            characterData: true,
            childList: true,
            subtree: true,
        });
    }
    destroyMutation() {
        if (!this.observer) {
            return;
        }
        this.observer.disconnect();
    }
}
HighlightJsDirective.ɵfac = function HighlightJsDirective_Factory(t) { return new (t || HighlightJsDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgModel, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
HighlightJsDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: HighlightJsDirective, selectors: [["", "highlight-js", ""]], hostAttrs: [2, "display", "none"], inputs: { lang: "lang", code: "code", options: "options" }, exportAs: ["highlightJs"] });
HighlightJsDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgModel, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
HighlightJsDirective.propDecorators = {
    options: [{ type: Input }],
    lang: [{ type: Input }],
    code: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightJsDirective, [{
        type: Directive,
        args: [{
                selector: '[highlight-js]',
                host: {
                    style: 'display:none;'
                },
                exportAs: 'highlightJs'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.NgModel, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { lang: [{
            type: Input
        }], code: [{
            type: Input
        }], options: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LWpzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3NyYy9oaWdobGlnaHQtanMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFJTCxNQUFNLEVBQ04sUUFBUSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQVl6QyxNQUFNLE9BQU8sb0JBQW9CO0FBQUcsSUFDbEMsWUFDVSxFQUEyQixFQUNmLE9BQWdCLEVBQ1YsR0FBUTtBQUNwQyxRQUhVLE9BQUUsR0FBRixFQUFFLENBQXlCO0FBQUMsUUFDaEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztBQUFDLFFBQ1gsUUFBRyxHQUFILEdBQUcsQ0FBSztBQUFDLFFBRzVCLFNBQUksR0FBRyxNQUFNLENBQUM7QUFDekIsSUFISyxDQUFDO0FBQ04sSUFZVSxVQUFVLENBQUMsR0FBVztBQUFJLFFBQ2hDLE9BQU8sQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDO0FBQ3RCLGFBQU8sT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUM7QUFDN0IsYUFBTyxPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztBQUM1QixhQUFPLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO0FBQzVCLGFBQU8sT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUM7QUFDOUIsYUFBTyxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQy9CLElBQUUsQ0FBQztBQUNILElBQ1UsSUFBSTtBQUFLLFFBQ2YsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ25CLFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEs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O0FBQ2IsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUMvQixJQUFFLENBQUM7QUFDSDtnREFqR0MsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxnQkFBZ0Isa0JBQzFCLElBQUksRUFBRSxzQkFDSixLQUFLLEVBQUUsZUFBZSxtQkFDdkIsa0JBQ0QsUUFBUSxFQUFFLGFBQWE7YUFDeEIseU9BQ0k7QUFBQztBQUE4QyxZQXJCbEQsVUFBVTtBQUNWLFlBUU8sT0FBTyx1QkFlWCxRQUFRO0FBQU8sNENBQ2YsTUFBTSxTQUFDLFFBQVE7QUFBUTtBQUFHO0FBRVAsc0JBQXJCLEtBQUs7QUFBSyxtQkFDVixLQUFLO0FBQUssbUJBQ1YsS0FBSztBQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxuICBBZnRlclZpZXdJbml0LFxuICBJbmplY3QsXG4gIE9wdGlvbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kZWwgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuZGVjbGFyZSBjb25zdCBobGpzOiBhbnk7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1toaWdobGlnaHQtanNdJyxcbiAgaG9zdDoge1xuICAgIHN0eWxlOiAnZGlzcGxheTpub25lOycsXG4gIH0sXG4gIGV4cG9ydEFzOiAnaGlnaGxpZ2h0SnMnLFxufSlcbmV4cG9ydCBjbGFzcyBIaWdobGlnaHRKc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBuZ01vZGVsOiBOZ01vZGVsLFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jOiBhbnksXG4gICkge31cbiAgQElucHV0KCkgb3B0aW9uczogYW55O1xuICBASW5wdXQoKSBsYW5nID0gJ2h0bWwnO1xuICBASW5wdXQoKSBjb2RlOiBzdHJpbmc7XG5cbiAgcHJvdGVjdGVkIGNvZGVFbDogSFRNTEVsZW1lbnQ7XG4gIHByb3RlY3RlZCBwYXJlbnRFbDogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgbW9kZWxWYWx1ZSQ6IFN1YnNjcmlwdGlvbjtcblxuICAvLyAjcmVnaW9uIE11dGF0aW9uXG5cbiAgcHJpdmF0ZSBvYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlcjtcblxuICBwcml2YXRlIGVzY2FwZUhUTUwoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiAoc3RyIHx8ICcnKVxuICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7JylcbiAgICAgIC5yZXBsYWNlKC8nL2csICcmYXBvczsnKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB0aGlzLmNvZGVFbCA9IHRoaXMuZG9jLmNyZWF0ZUVsZW1lbnQoJ3ByZScpO1xuICAgIGlmICh0aGlzLmxhbmcpIHtcbiAgICAgIHRoaXMuY29kZUVsLmNsYXNzTmFtZSA9IHRoaXMubGFuZztcbiAgICB9XG4gICAgdGhpcy5jb2RlRWwuaW5uZXJIVE1MID1cbiAgICAgIHRoaXMuY29kZSB8fCAnJyArIHRoaXMuZWwubmF0aXZlRWxlbWVudC5pbm5lckhUTUwudHJpbSgpO1xuICAgIHRoaXMucGFyZW50RWwgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50Tm9kZSBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLnBhcmVudEVsLmluc2VydEJlZm9yZSh0aGlzLmNvZGVFbCwgdGhpcy5lbC5uYXRpdmVFbGVtZW50Lm5leHRTaWJsaW5nKTtcblxuICAgIGhsanMuY29uZmlndXJlKHsgLi4udGhpcy5vcHRpb25zIH0pO1xuICAgIGhsanMuaGlnaGxpZ2h0QmxvY2sodGhpcy5jb2RlRWwpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXN0cm95KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNvZGVFbCkge1xuICAgICAgdGhpcy5wYXJlbnRFbC5yZW1vdmVDaGlsZCh0aGlzLmNvZGVFbCk7XG4gICAgICB0aGlzLmNvZGVFbCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubmdNb2RlbCkge1xuICAgICAgdGhpcy5tb2RlbFZhbHVlJCA9IHRoaXMubmdNb2RlbC52YWx1ZUNoYW5nZXMuc3Vic2NyaWJlKChyZXMpID0+IHtcbiAgICAgICAgdGhpcy5jb2RlID0gdGhpcy5lc2NhcGVIVE1MKHJlcyk7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW5pdE11dGF0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gICAgdGhpcy5kZXN0cm95TXV0YXRpb24oKTtcbiAgICBpZiAodGhpcy5tb2RlbFZhbHVlJCkge1xuICAgICAgdGhpcy5tb2RlbFZhbHVlJC51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaW5pdE11dGF0aW9uKCk6IHZvaWQge1xuICAgIGlmICh0eXBlb2YgTXV0YXRpb25PYnNlcnZlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuaW5pdC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCB7XG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZGVzdHJveU11dGF0aW9uKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5vYnNlcnZlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIC8vICNlbmRyZWdpb25uXG59XG4iXX0=